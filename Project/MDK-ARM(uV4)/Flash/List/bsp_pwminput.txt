; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_pwminput.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_pwminput.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\USMART -I..\..\User\bsp_stm32f4xx\LCD -I..\..\User\bsp_stm32f4xx\phase_shift -I..\..\User\bsp_stm32f4xx\PWMInput -I..\..\User\bsp_stm32f4xx\ADC -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F427xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\bsp_pwminput.crf ..\..\User\bsp_stm32f4xx\PWMInput\bsp_pwminput.c]
                          THUMB

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  TIM3_IRQHandler PROC
;;;73     
;;;74     void TIM3_IRQHandler(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;75     {
000002  ed2d8b0a          VPUSH    {d8-d12}
000006  b0a1              SUB      sp,sp,#0x84
;;;76     	TIM_ITConfig(TIM3, TIM_IT_CC2, DISABLE);
000008  2200              MOVS     r2,#0
00000a  2104              MOVS     r1,#4
00000c  4839              LDR      r0,|L1.244|
00000e  f7fffffe          BL       TIM_ITConfig
;;;77     //	printf("test program go to here!\r\n");
;;;78     	 uint32_t IC2Value = 0;
000012  2400              MOVS     r4,#0
;;;79     	 float DutyCycle = 0;
000014  ed9f0a38          VLDR     s0,|L1.248|
000018  ee105a10          VMOV     r5,s0
;;;80     	 uint32_t Frequency = 0;
00001c  2600              MOVS     r6,#0
;;;81     	char s1[50],s2[50];
;;;82     	RCC_ClocksTypeDef RCC_Clocks;
;;;83     	RCC_GetClocksFreq(&RCC_Clocks);
00001e  a803              ADD      r0,sp,#0xc
000020  f7fffffe          BL       RCC_GetClocksFreq
;;;84     	
;;;85     	
;;;86     
;;;87     	/* Get the Input Capture value */
;;;88     	IC2Value = TIM_GetCapture2(TIM3);
000024  4833              LDR      r0,|L1.244|
000026  f7fffffe          BL       TIM_GetCapture2
00002a  4604              MOV      r4,r0
;;;89     	
;;;90     	if (IC2Value != 0)
00002c  2c00              CMP      r4,#0
00002e  d04e              BEQ      |L1.206|
;;;91     	{
;;;92     		/* Duty cycle computation */
;;;93     		DutyCycle = (1.0*TIM_GetCapture1(TIM3) * 100) / IC2Value;
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       __aeabi_ui2d
000036  ec410b19          VMOV     d9,r0,r1
00003a  482e              LDR      r0,|L1.244|
00003c  f7fffffe          BL       TIM_GetCapture1
000040  4607              MOV      r7,r0
000042  f7fffffe          BL       __aeabi_ui2d
000046  ec410b1c          VMOV     d12,r0,r1
00004a  ed9f0b2c          VLDR     d0,|L1.252|
00004e  ec532b10          VMOV     r2,r3,d0
000052  f7fffffe          BL       __aeabi_dmul
000056  ec410b1b          VMOV     d11,r0,r1
00005a  ed9f0b2a          VLDR     d0,|L1.260|
00005e  ec532b10          VMOV     r2,r3,d0
000062  f7fffffe          BL       __aeabi_dmul
000066  ec410b1a          VMOV     d10,r0,r1
00006a  ec532b19          VMOV     r2,r3,d9
00006e  f7fffffe          BL       __aeabi_ddiv
000072  ec410b18          VMOV     d8,r0,r1
000076  f7fffffe          BL       __aeabi_d2f
00007a  4605              MOV      r5,r0
;;;94     		sprintf(s1,"DutyCycle = %3f",DutyCycle);
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       __aeabi_f2d
000082  ec410b18          VMOV     d8,r0,r1
000086  ec532b18          VMOV     r2,r3,d8
00008a  a120              ADR      r1,|L1.268|
00008c  a814              ADD      r0,sp,#0x50
00008e  f7fffffe          BL       __2sprintf
;;;95     		ShowString(30,130,200,16,16,s1);
000092  a814              ADD      r0,sp,#0x50
000094  2110              MOVS     r1,#0x10
000096  460b              MOV      r3,r1
000098  22c8              MOVS     r2,#0xc8
00009a  e9cd1000          STRD     r1,r0,[sp,#0]
00009e  2182              MOVS     r1,#0x82
0000a0  201e              MOVS     r0,#0x1e
0000a2  f7fffffe          BL       ShowString
;;;96     //		printf("DutyCycle = %d \r\n.",DutyCycle);
;;;97     
;;;98     		/* Frequency computation 
;;;99     		   TIM3 counter clock = (RCC_Clocks.HCLK_Frequency)/2 */
;;;100    
;;;101    		Frequency = (RCC_Clocks.HCLK_Frequency)/2 / IC2Value;
0000a6  9804              LDR      r0,[sp,#0x10]
0000a8  0840              LSRS     r0,r0,#1
0000aa  fbb0f6f4          UDIV     r6,r0,r4
;;;102    		sprintf(s2,"Frequency = %d",Frequency);
0000ae  4632              MOV      r2,r6
0000b0  a11a              ADR      r1,|L1.284|
0000b2  a807              ADD      r0,sp,#0x1c
0000b4  f7fffffe          BL       __2sprintf
;;;103    		ShowString(30,150,200,16,16,s2);
0000b8  a807              ADD      r0,sp,#0x1c
0000ba  2110              MOVS     r1,#0x10
0000bc  460b              MOV      r3,r1
0000be  22c8              MOVS     r2,#0xc8
0000c0  e9cd1000          STRD     r1,r0,[sp,#0]
0000c4  2196              MOVS     r1,#0x96
0000c6  201e              MOVS     r0,#0x1e
0000c8  f7fffffe          BL       ShowString
0000cc  e004              B        |L1.216|
                  |L1.206|
;;;104    //		
;;;105    //		printf("Frequency = %d \r\n.",DutyCycle);
;;;106    	}
;;;107    	else
;;;108    	{
;;;109    	DutyCycle = 0;
0000ce  ed9f0a0a          VLDR     s0,|L1.248|
0000d2  ee105a10          VMOV     r5,s0
;;;110    	Frequency = 0;
0000d6  2600              MOVS     r6,#0
                  |L1.216|
;;;111    	}
;;;112    	
;;;113    	 /* Clear TIM3 Capture compare interrupt pending bit */
;;;114    	TIM_ClearITPendingBit(TIM3, TIM_IT_CC2);
0000d8  2104              MOVS     r1,#4
0000da  4806              LDR      r0,|L1.244|
0000dc  f7fffffe          BL       TIM_ClearITPendingBit
;;;115    	TIM_ITConfig(TIM3, TIM_IT_CC2, ENABLE);
0000e0  2201              MOVS     r2,#1
0000e2  2104              MOVS     r1,#4
0000e4  4803              LDR      r0,|L1.244|
0000e6  f7fffffe          BL       TIM_ITConfig
;;;116    
;;;117    }
0000ea  b021              ADD      sp,sp,#0x84
0000ec  ecbd8b0a          VPOP     {d8-d12}
0000f0  bdf0              POP      {r4-r7,pc}
;;;118    	
                          ENDP

0000f2  0000              DCW      0x0000
                  |L1.244|
                          DCD      0x40000400
                  |L1.248|
0000f8  00000000          DCFS     0x00000000 ; 0
                  |L1.252|
0000fc  00000000          DCFD     0x3ff0000000000000 ; 1
000100  3ff00000
                  |L1.260|
000104  00000000          DCFD     0x4059000000000000 ; 100
000108  40590000
                  |L1.268|
00010c  44757479          DCB      "DutyCycle = %3f",0
000110  4379636c
000114  65203d20
000118  25336600
                  |L1.284|
00011c  46726571          DCB      "Frequency = %d",0
000120  75656e63
000124  79203d20
000128  256400  
00012b  00                DCB      0

                          AREA ||i.bsp_pwminput_init||, CODE, READONLY, ALIGN=2

                  bsp_pwminput_init PROC
;;;4      */
;;;5      void bsp_pwminput_init()
000000  b500              PUSH     {lr}
;;;6      {
000002  b087              SUB      sp,sp,#0x1c
;;;7      	GPIO_InitTypeDef GPIO_InitStructure;
;;;8          NVIC_InitTypeDef NVIC_InitStructure;
;;;9      	TIM_ICInitTypeDef  TIM_ICInitStructure;
;;;10     	
;;;11     	  /* TIM3clock enable */
;;;12         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;13     
;;;14         /* GPIOB clock enable */
;;;15         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;16     	
;;;17     	 /* TIM3 chennel2 configuration : PB.05 */
;;;18       GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_5;
000014  2020              MOVS     r0,#0x20
000016  9005              STR      r0,[sp,#0x14]
;;;19       GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
000018  2002              MOVS     r0,#2
00001a  f88d0018          STRB     r0,[sp,#0x18]
;;;20       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00001e  2003              MOVS     r0,#3
000020  f88d0019          STRB     r0,[sp,#0x19]
;;;21       GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000024  2000              MOVS     r0,#0
000026  f88d001a          STRB     r0,[sp,#0x1a]
;;;22       GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP ;
00002a  2001              MOVS     r0,#1
00002c  f88d001b          STRB     r0,[sp,#0x1b]
;;;23       GPIO_Init(GPIOB, &GPIO_InitStructure);
000030  a905              ADD      r1,sp,#0x14
000032  4820              LDR      r0,|L2.180|
000034  f7fffffe          BL       GPIO_Init
;;;24       
;;;25       /* Connect TIM pin to AF2 */
;;;26       GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_TIM3);
000038  2202              MOVS     r2,#2
00003a  2105              MOVS     r1,#5
00003c  481d              LDR      r0,|L2.180|
00003e  f7fffffe          BL       GPIO_PinAFConfig
;;;27     
;;;28       /* Enable the TIM3 global Interrupt */
;;;29       //保持比串口中断低一个抢占优先级
;;;30       NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
000042  201d              MOVS     r0,#0x1d
000044  f88d0010          STRB     r0,[sp,#0x10]
;;;31       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000048  2001              MOVS     r0,#1
00004a  f88d0011          STRB     r0,[sp,#0x11]
;;;32       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00004e  2000              MOVS     r0,#0
000050  f88d0012          STRB     r0,[sp,#0x12]
;;;33       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000054  2001              MOVS     r0,#1
000056  f88d0013          STRB     r0,[sp,#0x13]
;;;34       NVIC_Init(&NVIC_InitStructure);
00005a  a804              ADD      r0,sp,#0x10
00005c  f7fffffe          BL       NVIC_Init
;;;35       
;;;36         /* --------------------------------------------------------------------------- 
;;;37         TIM3 configuration: PWM Input mode
;;;38     
;;;39         In this example TIM3 input clock (TIM3CLK) is set to 2 * APB1 clock (PCLK1), 
;;;40         since APB1 prescaler is different from 1.   
;;;41           TIM3CLK = 2 * PCLK1  
;;;42           PCLK1 = HCLK / 4 
;;;43           => TIM3CLK = HCLK / 2 = SystemCoreClock /2
;;;44     
;;;45         External Signal Frequency = TIM3 counter clock / TIM3_CCR2 in Hz. 
;;;46     
;;;47         External Signal DutyCycle = (TIM3_CCR1*100)/(TIM3_CCR2) in %.
;;;48     
;;;49       --------------------------------------------------------------------------- */
;;;50       
;;;51     	TIM_ICInitStructure.TIM_Channel = TIM_Channel_2;
000060  2004              MOVS     r0,#4
000062  f8ad0004          STRH     r0,[sp,#4]
;;;52     	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
000066  2000              MOVS     r0,#0
000068  f8ad0006          STRH     r0,[sp,#6]
;;;53     	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
00006c  2001              MOVS     r0,#1
00006e  f8ad0008          STRH     r0,[sp,#8]
;;;54     	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
000072  2000              MOVS     r0,#0
000074  f8ad000a          STRH     r0,[sp,#0xa]
;;;55     	TIM_ICInitStructure.TIM_ICFilter = 0x0;
000078  f8ad000c          STRH     r0,[sp,#0xc]
;;;56     	
;;;57     	TIM_PWMIConfig(TIM3, &TIM_ICInitStructure);
00007c  a901              ADD      r1,sp,#4
00007e  480e              LDR      r0,|L2.184|
000080  f7fffffe          BL       TIM_PWMIConfig
;;;58     	
;;;59     	/* Select the TIM3 Input Trigger: TI2FP2 */
;;;60     	TIM_SelectInputTrigger(TIM3, TIM_TS_TI2FP2);
000084  2160              MOVS     r1,#0x60
000086  480c              LDR      r0,|L2.184|
000088  f7fffffe          BL       TIM_SelectInputTrigger
;;;61     
;;;62     	/* Select the slave Mode: Reset Mode */
;;;63     	TIM_SelectSlaveMode(TIM3, TIM_SlaveMode_Reset);
00008c  2104              MOVS     r1,#4
00008e  480a              LDR      r0,|L2.184|
000090  f7fffffe          BL       TIM_SelectSlaveMode
;;;64     	TIM_SelectMasterSlaveMode(TIM3,TIM_MasterSlaveMode_Enable);
000094  2180              MOVS     r1,#0x80
000096  4808              LDR      r0,|L2.184|
000098  f7fffffe          BL       TIM_SelectMasterSlaveMode
;;;65     
;;;66     	/* TIM enable counter */
;;;67     	TIM_Cmd(TIM3, ENABLE);
00009c  2101              MOVS     r1,#1
00009e  4806              LDR      r0,|L2.184|
0000a0  f7fffffe          BL       TIM_Cmd
;;;68     
;;;69     	/* Enable the CC2 Interrupt Request */
;;;70     	TIM_ITConfig(TIM3, TIM_IT_CC2, ENABLE);
0000a4  2201              MOVS     r2,#1
0000a6  2104              MOVS     r1,#4
0000a8  4803              LDR      r0,|L2.184|
0000aa  f7fffffe          BL       TIM_ITConfig
;;;71     }
0000ae  b007              ADD      sp,sp,#0x1c
0000b0  bd00              POP      {pc}
;;;72     
                          ENDP

0000b2  0000              DCW      0x0000
                  |L2.180|
                          DCD      0x40020400
                  |L2.184|
                          DCD      0x40000400

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\PWMInput\\bsp_pwminput.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_pwminput_c_f8ae6cad____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_bsp_pwminput_c_f8ae6cad____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_pwminput_c_f8ae6cad____REVSH|
#line 144
|__asm___14_bsp_pwminput_c_f8ae6cad____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_pwminput_c_f8ae6cad____RRX|
#line 300
|__asm___14_bsp_pwminput_c_f8ae6cad____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
