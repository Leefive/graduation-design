; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\USMART -I..\..\User\bsp_stm32f4xx\LCD -I..\..\User\bsp_stm32f4xx\phase_shift -I..\..\User\bsp_stm32f4xx\PWMInput -I..\..\User\bsp_stm32f4xx\ADC -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F427xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.PrintfLogo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  PrintfLogo PROC
;;;179    */
;;;180    static void PrintfLogo(void)
000000  b570              PUSH     {r4-r6,lr}
;;;181    {
;;;182    	/* 检测CPU ID */
;;;183    	{
;;;184    		/* 参考手册：
;;;185    			32.6.1 MCU device ID code
;;;186    			33.1 Unique device ID register (96 bits)
;;;187    		*/
;;;188    		uint32_t CPU_Sn0, CPU_Sn1, CPU_Sn2;
;;;189    
;;;190    		CPU_Sn0 = *(__IO uint32_t*)(0x1FFF7A10);
000002  4817              LDR      r0,|L1.96|
000004  6804              LDR      r4,[r0,#0]
;;;191    		CPU_Sn1 = *(__IO uint32_t*)(0x1FFF7A10 + 4);
000006  1d00              ADDS     r0,r0,#4
000008  6805              LDR      r5,[r0,#0]
;;;192    		CPU_Sn2 = *(__IO uint32_t*)(0x1FFF7A10 + 8);
00000a  1d00              ADDS     r0,r0,#4
00000c  6806              LDR      r6,[r0,#0]
;;;193    
;;;194    		printf("\r\nCPU : STM32F407IGT6, LQFP176, UID = %08X %08X %08X\n\r"
00000e  4623              MOV      r3,r4
000010  462a              MOV      r2,r5
000012  4631              MOV      r1,r6
000014  a013              ADR      r0,|L1.100|
000016  f7fffffe          BL       __2printf
;;;195    			, CPU_Sn2, CPU_Sn1, CPU_Sn0);
;;;196    	}
;;;197    
;;;198    	printf("\n\r");
00001a  a01f              ADR      r0,|L1.152|
00001c  f7fffffe          BL       __2printf
;;;199    	printf("*************************************************************\n\r");
000020  a01e              ADR      r0,|L1.156|
000022  f7fffffe          BL       __2printf
;;;200    	printf("* 例程名称   : %s\r\n", EXAMPLE_NAME);	/* 打印例程名称 */
000026  a12d              ADR      r1,|L1.220|
000028  a034              ADR      r0,|L1.252|
00002a  f7fffffe          BL       __2printf
;;;201    	printf("* 例程版本   : %s\r\n", DEMO_VER);		/* 打印例程版本 */
00002e  a138              ADR      r1,|L1.272|
000030  a038              ADR      r0,|L1.276|
000032  f7fffffe          BL       __2printf
;;;202    	printf("* 发布日期   : %s\r\n", EXAMPLE_DATE);	/* 打印例程日期 */
000036  a13c              ADR      r1,|L1.296|
000038  a03e              ADR      r0,|L1.308|
00003a  f7fffffe          BL       __2printf
;;;203    
;;;204    	/* 打印ST固件库版本，这3个定义宏在stm32f10x.h文件中 */
;;;205    	printf("* 固件库版本 : V%d.%d.%d (STM32F4xx_StdPeriph_Driver)\r\n", __STM32F4XX_STDPERIPH_VERSION_MAIN,
00003e  2300              MOVS     r3,#0
000040  2205              MOVS     r2,#5
000042  2101              MOVS     r1,#1
000044  a040              ADR      r0,|L1.328|
000046  f7fffffe          BL       __2printf
;;;206    			__STM32F4XX_STDPERIPH_VERSION_SUB1,__STM32F4XX_STDPERIPH_VERSION_SUB2);
;;;207    	printf("* \r\n");	/* 打印一行空格 */
00004a  a04d              ADR      r0,|L1.384|
00004c  f7fffffe          BL       __2printf
;;;208    
;;;209    	printf("* Copyright www.armfly.com 安富莱电子\r\n");
000050  a04d              ADR      r0,|L1.392|
000052  f7fffffe          BL       __2printf
;;;210    	printf("*************************************************************\n\r");
000056  a011              ADR      r0,|L1.156|
000058  f7fffffe          BL       __2printf
;;;211    }
00005c  bd70              POP      {r4-r6,pc}
;;;212    
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      0x1fff7a10
                  |L1.100|
000064  0d0a4350          DCB      "\r\nCPU : STM32F407IGT6, LQFP176, UID = %08X %08X %08X"
000068  55203a20
00006c  53544d33
000070  32463430
000074  37494754
000078  362c204c
00007c  51465031
000080  37362c20
000084  55494420
000088  3d202530
00008c  38582025
000090  30385820
000094  25303858
                  |L1.152|
000098  0a0d00            DCB      "\n\r",0
00009b  00                DCB      0
                  |L1.156|
00009c  2a2a2a2a          DCB      "*******************************************************"
0000a0  2a2a2a2a
0000a4  2a2a2a2a
0000a8  2a2a2a2a
0000ac  2a2a2a2a
0000b0  2a2a2a2a
0000b4  2a2a2a2a
0000b8  2a2a2a2a
0000bc  2a2a2a2a
0000c0  2a2a2a2a
0000c4  2a2a2a2a
0000c8  2a2a2a2a
0000cc  2a2a2a2a
0000d0  2a2a2a  
0000d3  2a2a2a2a          DCB      "******\n\r",0
0000d7  2a2a0a0d
0000db  00      
                  |L1.220|
0000dc  56352d30          DCB      "V5-003b_SysTick",202,181,209,233,"_",184,180,212,211,192
0000e0  3033625f
0000e4  53797354
0000e8  69636bca
0000ec  b5d1e95f
0000f0  b8b4d4d3
0000f4  c0      
0000f5  fdd7d300          DCB      253,215,211,0
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L1.252|
0000fc  2a20c0fd          DCB      "* ",192,253,179,204,195,251,179,198,"   : %s\r\n",0
000100  b3ccc3fb
000104  b3c62020
000108  203a2025
00010c  730d0a00
                  |L1.272|
000110  312e3100          DCB      "1.1",0
                  |L1.276|
000114  2a20c0fd          DCB      "* ",192,253,179,204,176,230,177,190,"   : %s\r\n",0
000118  b3ccb0e6
00011c  b1be2020
000120  203a2025
000124  730d0a00
                  |L1.296|
000128  32303135          DCB      "2015-03-23",0
00012c  2d30332d
000130  323300  
000133  00                DCB      0
                  |L1.308|
000134  2a20b7a2          DCB      "* ",183,162,178,188,200,213,198,218,"   : %s\r\n",0
000138  b2bcc8d5
00013c  c6da2020
000140  203a2025
000144  730d0a00
                  |L1.328|
000148  2a20b9cc          DCB      "* ",185,204,188,254,191,226,176,230,177,190," : V%d.%d."
00014c  bcfebfe2
000150  b0e6b1be
000154  203a2056
000158  25642e25
00015c  642e    
00015e  25642028          DCB      "%d (STM32F4xx_StdPeriph_Driver)\r\n",0
000162  53544d33
000166  32463478
00016a  785f5374
00016e  64506572
000172  6970685f
000176  44726976
00017a  6572290d
00017e  0a00    
                  |L1.384|
000180  2a200d0a          DCB      "* \r\n",0
000184  00      
000185  00                DCB      0
000186  00                DCB      0
000187  00                DCB      0
                  |L1.392|
000188  2a20436f          DCB      "* Copyright www.armfly.com ",176,178,184,187,192,179,181
00018c  70797269
000190  67687420
000194  7777772e
000198  61726d66
00019c  6c792e63
0001a0  6f6d20b0
0001a4  b2b8bbc0
0001a8  b3b5    
0001aa  e7d7d30d          DCB      231,215,211,"\r\n",0
0001ae  0a00    

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;62     */
;;;63     int main(void)
000000  ed2d8b0a          VPUSH    {d8-d12}
;;;64     {
000004  b0a0              SUB      sp,sp,#0x80
;;;65     //	int32_t usTimeStart,usTimeEnd;
;;;66     //	uint8_t temp;
;;;67     	
;;;68     	/*
;;;69     		ST固件库中的启动文件已经执行了 SystemInit() 函数，该函数在 system_stm32f4xx.c 文件，主要功能是
;;;70     	配置CPU系统的时钟，内部Flash访问时序，配置FSMC用于外部SRAM
;;;71     	*/
;;;72     	char s[80];
;;;73     	uint16_t phase_shift_duty_cycle=100;  //初始化移相占空比为10
000006  2464              MOVS     r4,#0x64
;;;74     	uint32_t uiAverage,i;
;;;75     	float32_t v1;
;;;76     	v1 = -1.23f;
000008  ed9f0a80          VLDR     s0,|L2.524|
00000c  ed8d0a0b          VSTR     s0,[sp,#0x2c]
;;;77     	float ADC_votage,Vout;
;;;78     	float32_t VoltageRange_error,out;
;;;79     	arm_pid_instance_f32 voltage_control;
;;;80     	
;;;81     	voltage_control.Kp=15;
000010  eeb20a0e          VMOV.F32 s0,#15.00000000
000014  ed8d0a08          VSTR     s0,[sp,#0x20]
;;;82     	voltage_control.Ki=0.08;
000018  ed9f0a7d          VLDR     s0,|L2.528|
00001c  ed8d0a09          VSTR     s0,[sp,#0x24]
;;;83     	
;;;84     	arm_pid_reset_f32(&voltage_control);
000020  a802              ADD      r0,sp,#8
000022  f7fffffe          BL       arm_pid_reset_f32
;;;85         arm_pid_init_f32(&voltage_control, 1);
000026  2101              MOVS     r1,#1
000028  a802              ADD      r0,sp,#8
00002a  f7fffffe          BL       arm_pid_init_f32
;;;86     	
;;;87     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);//设置系统中断优先级分组2
00002e  f44f60a0          MOV      r0,#0x500
000032  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;88     	
;;;89     	bsp_Init();		/* 硬件初始化 */
000036  f7fffffe          BL       bsp_Init
;;;90     
;;;91     	PrintfLogo();	/* 打印例程信息到串口1 */
00003a  f7fffffe          BL       PrintfLogo
;;;92     
;;;93     	lcd_dev.p_color=Red;
00003e  f44f4078          MOV      r0,#0xf800
000042  4974              LDR      r1,|L2.532|
000044  8008              STRH     r0,[r1,#0]
;;;94     	
;;;95     	bsp_StartAutoTimer(0,500);  //500ms一个定时器
000046  f44f71fa          MOV      r1,#0x1f4
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       bsp_StartAutoTimer
;;;96     	bsp_StartAutoTimer(1,100);
000050  2164              MOVS     r1,#0x64
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       bsp_StartAutoTimer
;;;97     	
;;;98     	arm_abs_f32(&v1,&v1,1); 
000058  2201              MOVS     r2,#1
00005a  a90b              ADD      r1,sp,#0x2c
00005c  a80b              ADD      r0,sp,#0x2c
00005e  f7fffffe          BL       arm_abs_f32
;;;99     	
;;;100    	printf("\n\r V1 = %f \n\r",v1);
000062  980b              LDR      r0,[sp,#0x2c]
000064  f7fffffe          BL       __aeabi_f2d
000068  ec410b1a          VMOV     d10,r0,r1
00006c  ec532b1a          VMOV     r2,r3,d10
000070  a069              ADR      r0,|L2.536|
000072  f7fffffe          BL       __2printf
                  |L2.118|
;;;101    	
;;;102    	/* 进入主程序循环体 */
;;;103    	while (1)
000076  e0c7              B        |L2.520|
                  |L2.120|
;;;104    	{
;;;105    		
;;;106    		if(bsp_CheckTimer(0))
000078  2000              MOVS     r0,#0
00007a  f7fffffe          BL       bsp_CheckTimer
00007e  b110              CBZ      r0,|L2.134|
;;;107    		{
;;;108    			bsp_LedToggle(1);
000080  2001              MOVS     r0,#1
000082  f7fffffe          BL       bsp_LedToggle
                  |L2.134|
;;;109    		}
;;;110    		if(bsp_CheckTimer(1))
000086  2001              MOVS     r0,#1
000088  f7fffffe          BL       bsp_CheckTimer
00008c  2800              CMP      r0,#0
00008e  d0f2              BEQ      |L2.118|
;;;111    		{
;;;112    			uiAverage = 0;
000090  2500              MOVS     r5,#0
;;;113    			for(i = 0; i < 20; i++)
000092  2600              MOVS     r6,#0
000094  e004              B        |L2.160|
                  |L2.150|
;;;114    			{
;;;115    				uiAverage += ADC3ConvertedValue[i];
000096  4864              LDR      r0,|L2.552|
000098  f8300016          LDRH     r0,[r0,r6,LSL #1]
00009c  4405              ADD      r5,r5,r0
00009e  1c76              ADDS     r6,r6,#1              ;113
                  |L2.160|
0000a0  2e14              CMP      r6,#0x14              ;113
0000a2  d3f8              BCC      |L2.150|
;;;116    			}
;;;117    			
;;;118    			uiAverage = uiAverage/20;
0000a4  2014              MOVS     r0,#0x14
0000a6  fbb5f5f0          UDIV     r5,r5,r0
;;;119    			
;;;120    			ADC_votage=(float) ((uiAverage * (3.3 /4096)) - 0.030);
0000aa  4628              MOV      r0,r5
0000ac  f7fffffe          BL       __aeabi_ui2d
0000b0  ec410b1c          VMOV     d12,r0,r1
0000b4  ed9f0b5d          VLDR     d0,|L2.556|
0000b8  ec532b10          VMOV     r2,r3,d0
0000bc  f7fffffe          BL       __aeabi_dmul
0000c0  ec410b1b          VMOV     d11,r0,r1
0000c4  ed9f0b5b          VLDR     d0,|L2.564|
0000c8  ec532b10          VMOV     r2,r3,d0
0000cc  f7fffffe          BL       __aeabi_dsub
0000d0  ec410b1a          VMOV     d10,r0,r1
0000d4  f7fffffe          BL       __aeabi_d2f
0000d8  ee090a90          VMOV     s19,r0
;;;121    	
;;;122    		    Vout = ADC_votage * reduction_factor;
0000dc  4857              LDR      r0,|L2.572|
0000de  ed900a00          VLDR     s0,[r0,#0]
0000e2  ee698a80          VMUL.F32 s17,s19,s0
;;;123    			
;;;124    			sprintf(s,"Vout = :%f",Vout);
0000e6  ee180a90          VMOV     r0,s17
0000ea  f7fffffe          BL       __aeabi_f2d
0000ee  ec410b1a          VMOV     d10,r0,r1
0000f2  ec532b1a          VMOV     r2,r3,d10
0000f6  a152              ADR      r1,|L2.576|
0000f8  a80c              ADD      r0,sp,#0x30
0000fa  f7fffffe          BL       __2sprintf
;;;125    			ShowString(30,100,200,24,24,s);  //显示到LCD上
0000fe  a80c              ADD      r0,sp,#0x30
000100  2118              MOVS     r1,#0x18
000102  460b              MOV      r3,r1
000104  22c8              MOVS     r2,#0xc8
000106  e9cd1000          STRD     r1,r0,[sp,#0]
00010a  2164              MOVS     r1,#0x64
00010c  201e              MOVS     r0,#0x1e
00010e  f7fffffe          BL       ShowString
;;;126    			
;;;127    			printf("Vout = %f \r\n",Vout);
000112  ee180a90          VMOV     r0,s17
000116  f7fffffe          BL       __aeabi_f2d
00011a  ec410b1a          VMOV     d10,r0,r1
00011e  ec532b1a          VMOV     r2,r3,d10
000122  a04a              ADR      r0,|L2.588|
000124  f7fffffe          BL       __2printf
;;;128    			
;;;129    			
;;;130    			VoltageRange_error = (float32_t) (target_voltage - Vout);  //算出电压差值
000128  ee180a90          VMOV     r0,s17
00012c  f7fffffe          BL       __aeabi_f2d
000130  ec410b1b          VMOV     d11,r0,r1
000134  ed9f0b49          VLDR     d0,|L2.604|
000138  ec532b10          VMOV     r2,r3,d0
00013c  f7fffffe          BL       __aeabi_drsub
000140  ec410b1a          VMOV     d10,r0,r1
000144  f7fffffe          BL       __aeabi_d2f
000148  ee080a10          VMOV     s16,r0
;;;131    			
;;;132    			out = arm_pid_f32(&voltage_control,VoltageRange_error);  //PID计算，输出增量
00014c  a802              ADD      r0,sp,#8
00014e  ed900a01          VLDR     s0,[r0,#4]
000152  edd00a03          VLDR     s1,[r0,#0xc]
000156  ee200a20          VMUL.F32 s0,s0,s1
00015a  edd00a00          VLDR     s1,[r0,#0]
00015e  ee000a88          VMLA.F32 s0,s1,s16
000162  edd00a02          VLDR     s1,[r0,#8]
000166  ed901a04          VLDR     s2,[r0,#0x10]
00016a  ee000a81          VMLA.F32 s0,s1,s2
00016e  edd00a05          VLDR     s1,[r0,#0x14]
000172  ee300a20          VADD.F32 s0,s0,s1
000176  eeb09a40          VMOV.F32 s18,s0
00017a  ed900a03          VLDR     s0,[r0,#0xc]
00017e  ed800a04          VSTR     s0,[r0,#0x10]
000182  ed808a03          VSTR     s16,[r0,#0xc]
000186  ed809a05          VSTR     s18,[r0,#0x14]
00018a  bf00              NOP      
00018c  bf00              NOP      
;;;133    			
;;;134    			phase_shift_duty_cycle = phase_shift_duty_cycle + out;   //在原来的基础上加上增量
00018e  ee004a10          VMOV     s0,r4
000192  eeb80a40          VCVT.F32.U32 s0,s0
000196  ee300a09          VADD.F32 s0,s0,s18
00019a  eebc0ac0          VCVT.U32.F32 s0,s0
00019e  ee100a10          VMOV     r0,s0
0001a2  b284              UXTH     r4,r0
;;;135    			
;;;136    			//限幅
;;;137    			if(Vout <= 36.5)
0001a4  ee180a90          VMOV     r0,s17
0001a8  f7fffffe          BL       __aeabi_f2d
0001ac  ec410b1a          VMOV     d10,r0,r1
0001b0  ed9f0b2c          VLDR     d0,|L2.612|
0001b4  ec532b10          VMOV     r2,r3,d0
0001b8  f7fffffe          BL       __aeabi_cdcmple
0001bc  d806              BHI      |L2.460|
;;;138    			{
;;;139    				if(phase_shift_duty_cycle >= 200)
0001be  2cc8              CMP      r4,#0xc8
0001c0  db00              BLT      |L2.452|
;;;140    				{
;;;141    					phase_shift_duty_cycle = 200;
0001c2  24c8              MOVS     r4,#0xc8
                  |L2.452|
;;;142    				}
;;;143    				if(phase_shift_duty_cycle <= 30)
0001c4  2c1e              CMP      r4,#0x1e
0001c6  dc09              BGT      |L2.476|
;;;144    				{
;;;145    					phase_shift_duty_cycle =30;
0001c8  241e              MOVS     r4,#0x1e
0001ca  e007              B        |L2.476|
                  |L2.460|
;;;146    				}
;;;147    		    }
;;;148    			else
;;;149    			{
;;;150    				if(phase_shift_duty_cycle >= 500)
0001cc  f5b47ffa          CMP      r4,#0x1f4
0001d0  db01              BLT      |L2.470|
;;;151    				{
;;;152    					phase_shift_duty_cycle = 500;
0001d2  f44f74fa          MOV      r4,#0x1f4
                  |L2.470|
;;;153    				}
;;;154    				if(phase_shift_duty_cycle <= 30)
0001d6  2c1e              CMP      r4,#0x1e
0001d8  dc00              BGT      |L2.476|
;;;155    				{
;;;156    					phase_shift_duty_cycle =30;
0001da  241e              MOVS     r4,#0x1e
                  |L2.476|
;;;157    				}
;;;158    			}
;;;159    		
;;;160    			bsp_set_phase_shift_duty_cycle(phase_shift_duty_cycle);
0001dc  4620              MOV      r0,r4
0001de  f7fffffe          BL       bsp_set_phase_shift_duty_cycle
;;;161    			
;;;162    			printf("duty_cycle = %d",phase_shift_duty_cycle);
0001e2  4621              MOV      r1,r4
0001e4  a021              ADR      r0,|L2.620|
0001e6  f7fffffe          BL       __2printf
;;;163    			
;;;164    			sprintf(s,"duty_cycle = :%d ",phase_shift_duty_cycle);
0001ea  4622              MOV      r2,r4
0001ec  a123              ADR      r1,|L2.636|
0001ee  a80c              ADD      r0,sp,#0x30
0001f0  f7fffffe          BL       __2sprintf
;;;165    			ShowString(30,130,200,24,24,s);  //显示到LCD上
0001f4  a80c              ADD      r0,sp,#0x30
0001f6  2118              MOVS     r1,#0x18
0001f8  460b              MOV      r3,r1
0001fa  22c8              MOVS     r2,#0xc8
0001fc  e9cd1000          STRD     r1,r0,[sp,#0]
000200  2182              MOVS     r1,#0x82
000202  201e              MOVS     r0,#0x1e
000204  f7fffffe          BL       ShowString
                  |L2.520|
000208  e736              B        |L2.120|
;;;166    			
;;;167    		}
;;;168    	}
;;;169    
;;;170    }
;;;171    
                          ENDP

00020a  0000              DCW      0x0000
                  |L2.524|
00020c  bf9d70a4          DCFS     0xbf9d70a4 ; -1.2300000190734863
                  |L2.528|
000210  3da3d70a          DCFS     0x3da3d70a ; 0.079999998211860657
                  |L2.532|
                          DCD      lcd_dev
                  |L2.536|
000218  0a0d2056          DCB      "\n\r V1 = %f \n\r",0
00021c  31203d20
000220  2566200a
000224  0d00    
000226  00                DCB      0
000227  00                DCB      0
                  |L2.552|
                          DCD      ADC3ConvertedValue
                  |L2.556|
00022c  66666666          DCFD     0x3f4a666666666666 ; 0.00080566406249999996
000230  3f4a6666
                  |L2.564|
000234  eb851eb8          DCFD     0x3f9eb851eb851eb8 ; 0.029999999999999999
000238  3f9eb851
                  |L2.572|
                          DCD      reduction_factor
                  |L2.576|
000240  566f7574          DCB      "Vout = :%f",0
000244  203d203a
000248  256600  
00024b  00                DCB      0
                  |L2.588|
00024c  566f7574          DCB      "Vout = %f \r\n",0
000250  203d2025
000254  66200d0a
000258  00      
000259  00                DCB      0
00025a  00                DCB      0
00025b  00                DCB      0
                  |L2.604|
00025c  00000000          DCFD     0x4044400000000000 ; 40.5
000260  40444000
                  |L2.612|
000264  00000000          DCFD     0x4042400000000000 ; 36.5
000268  40424000
                  |L2.620|
00026c  64757479          DCB      "duty_cycle = %d",0
000270  5f637963
000274  6c65203d
000278  20256400
                  |L2.636|
00027c  64757479          DCB      "duty_cycle = :%d ",0
000280  5f637963
000284  6c65203d
000288  203a2564
00028c  2000    
00028e  00                DCB      0
00028f  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 144
|__asm___6_main_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 300
|__asm___6_main_c_main____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
