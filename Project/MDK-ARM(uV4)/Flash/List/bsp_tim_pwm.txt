; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_tim_pwm.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_tim_pwm.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\USMART -I..\..\User\bsp_stm32f4xx\LCD -I..\..\User\bsp_stm32f4xx\phase_shift -I..\..\User\bsp_stm32f4xx\PWMInput -I..\..\User\bsp_stm32f4xx\ADC -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F427xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\bsp_tim_pwm.crf ..\..\User\bsp_stm32f4xx\src\bsp_tim_pwm.c]
                          THUMB

                          AREA ||i.bsp_ConfigGpioOut||, CODE, READONLY, ALIGN=1

                  bsp_ConfigGpioOut PROC
;;;406    */
;;;407    void bsp_ConfigGpioOut(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX)
000000  b57c              PUSH     {r2-r6,lr}
;;;408    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;409    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;410    
;;;411    	/* 使能GPIO时钟 */
;;;412    	RCC_AHB1PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       bsp_GetRCCofGPIO
00000c  4606              MOV      r6,r0
00000e  2101              MOVS     r1,#1
000010  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;413    
;;;414    	/* 配置GPIO */
;;;415    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;		/* 带入的形参 */
000014  9400              STR      r4,[sp,#0]
;;;416    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;	/* 输出 */
000016  2001              MOVS     r0,#1
000018  f88d0004          STRB     r0,[sp,#4]
;;;417    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2002              MOVS     r0,#2
00001e  f88d0005          STRB     r0,[sp,#5]
;;;418    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 推挽 */
000022  2000              MOVS     r0,#0
000024  f88d0006          STRB     r0,[sp,#6]
;;;419    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;	/* 无上拉 */
000028  f88d0007          STRB     r0,[sp,#7]
;;;420    	GPIO_Init(GPIOx, &GPIO_InitStructure);
00002c  4669              MOV      r1,sp
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GPIO_Init
;;;421    }
000034  bd7c              POP      {r2-r6,pc}
;;;422    
                          ENDP


                          AREA ||i.bsp_ConfigTimGpio||, CODE, READONLY, ALIGN=2

                  bsp_ConfigTimGpio PROC
;;;368    */
;;;369    void bsp_ConfigTimGpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX, TIM_TypeDef* TIMx, uint8_t _ucChannel)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;370    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  4699              MOV      r9,r3
;;;371    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;372    
;;;373    	/* 使能GPIO时钟 */
;;;374    	RCC_AHB1PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       bsp_GetRCCofGPIO
000012  4607              MOV      r7,r0
000014  2101              MOVS     r1,#1
000016  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;375    
;;;376      	/* 使能TIM时钟 */
;;;377    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
00001a  481f              LDR      r0,|L2.152|
00001c  4284              CMP      r4,r0
00001e  d00b              BEQ      |L2.56|
000020  481e              LDR      r0,|L2.156|
000022  4284              CMP      r4,r0
000024  d008              BEQ      |L2.56|
000026  481e              LDR      r0,|L2.160|
000028  4284              CMP      r4,r0
00002a  d005              BEQ      |L2.56|
00002c  481d              LDR      r0,|L2.164|
00002e  4284              CMP      r4,r0
000030  d002              BEQ      |L2.56|
000032  481d              LDR      r0,|L2.168|
000034  4284              CMP      r4,r0
000036  d107              BNE      |L2.72|
                  |L2.56|
;;;378    	{
;;;379    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       bsp_GetRCCofTIM
00003e  4607              MOV      r7,r0
000040  2101              MOVS     r1,#1
000042  f7fffffe          BL       RCC_APB2PeriphClockCmd
000046  e006              B        |L2.86|
                  |L2.72|
;;;380    	}
;;;381    	else
;;;382    	{
;;;383    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       bsp_GetRCCofTIM
00004e  4607              MOV      r7,r0
000050  2101              MOVS     r1,#1
000052  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L2.86|
;;;384    	}
;;;385    
;;;386    	/* 配置GPIO */
;;;387    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;	/* 带入的形参 */
000056  9500              STR      r5,[sp,#0]
;;;388    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000058  2002              MOVS     r0,#2
00005a  f88d0004          STRB     r0,[sp,#4]
;;;389    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00005e  2003              MOVS     r0,#3
000060  f88d0005          STRB     r0,[sp,#5]
;;;390    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000064  2000              MOVS     r0,#0
000066  f88d0006          STRB     r0,[sp,#6]
;;;391    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
00006a  2001              MOVS     r0,#1
00006c  f88d0007          STRB     r0,[sp,#7]
;;;392    	GPIO_Init(GPIOx, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       GPIO_Init
;;;393    
;;;394    	/* 连接到AF功能 */
;;;395    	GPIO_PinAFConfig(GPIOx, bsp_GetPinSource(GPIO_PinX), bsp_GetAFofTIM(TIMx));
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       bsp_GetAFofTIM
00007e  4607              MOV      r7,r0
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       bsp_GetPinSource
000086  4680              MOV      r8,r0
000088  463a              MOV      r2,r7
00008a  4641              MOV      r1,r8
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       GPIO_PinAFConfig
;;;396    }
000092  e8bd87fc          POP      {r2-r10,pc}
;;;397    
                          ENDP

000096  0000              DCW      0x0000
                  |L2.152|
                          DCD      0x40010000
                  |L2.156|
                          DCD      0x40010400
                  |L2.160|
                          DCD      0x40014000
                  |L2.164|
                          DCD      0x40014400
                  |L2.168|
                          DCD      0x40014800

                          AREA ||i.bsp_GetAFofTIM||, CODE, READONLY, ALIGN=2

                  bsp_GetAFofTIM PROC
;;;287    */
;;;288    uint8_t bsp_GetAFofTIM(TIM_TypeDef* TIMx)
000000  4601              MOV      r1,r0
;;;289    {
;;;290    	uint8_t ret = 0;
000002  2000              MOVS     r0,#0
;;;291    
;;;292    	/*
;;;293    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13, TIM14
;;;294    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;295    	*/
;;;296    	if (TIMx == TIM1)
000004  4a22              LDR      r2,|L3.144|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L3.14|
;;;297    	{
;;;298    		ret = GPIO_AF_TIM1;
00000a  2001              MOVS     r0,#1
00000c  e03f              B        |L3.142|
                  |L3.14|
;;;299    	}
;;;300    	else if (TIMx == TIM8)
00000e  4a21              LDR      r2,|L3.148|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L3.24|
;;;301    	{
;;;302    		ret = GPIO_AF_TIM8;
000014  2003              MOVS     r0,#3
000016  e03a              B        |L3.142|
                  |L3.24|
;;;303    	}
;;;304    	else if (TIMx == TIM9)
000018  4a1f              LDR      r2,|L3.152|
00001a  4291              CMP      r1,r2
00001c  d101              BNE      |L3.34|
;;;305    	{
;;;306    		ret = GPIO_AF_TIM9;
00001e  2003              MOVS     r0,#3
000020  e035              B        |L3.142|
                  |L3.34|
;;;307    	}
;;;308    	else if (TIMx == TIM10)
000022  4a1e              LDR      r2,|L3.156|
000024  4291              CMP      r1,r2
000026  d101              BNE      |L3.44|
;;;309    	{
;;;310    		ret = GPIO_AF_TIM10;
000028  2003              MOVS     r0,#3
00002a  e030              B        |L3.142|
                  |L3.44|
;;;311    	}
;;;312    	else if (TIMx == TIM11)
00002c  4a1c              LDR      r2,|L3.160|
00002e  4291              CMP      r1,r2
000030  d101              BNE      |L3.54|
;;;313    	{
;;;314    		ret = GPIO_AF_TIM11;
000032  2003              MOVS     r0,#3
000034  e02b              B        |L3.142|
                  |L3.54|
;;;315    	}
;;;316    	/* 下面是 APB1时钟 */
;;;317    	else if (TIMx == TIM2)
000036  f1b14f80          CMP      r1,#0x40000000
00003a  d101              BNE      |L3.64|
;;;318    	{
;;;319    		ret = GPIO_AF_TIM2;
00003c  2001              MOVS     r0,#1
00003e  e026              B        |L3.142|
                  |L3.64|
;;;320    	}
;;;321    	else if (TIMx == TIM3)
000040  4a18              LDR      r2,|L3.164|
000042  4291              CMP      r1,r2
000044  d101              BNE      |L3.74|
;;;322    	{
;;;323    		ret = GPIO_AF_TIM3;
000046  2002              MOVS     r0,#2
000048  e021              B        |L3.142|
                  |L3.74|
;;;324    	}
;;;325    	else if (TIMx == TIM4)
00004a  4a17              LDR      r2,|L3.168|
00004c  4291              CMP      r1,r2
00004e  d101              BNE      |L3.84|
;;;326    	{
;;;327    		ret = GPIO_AF_TIM4;
000050  2002              MOVS     r0,#2
000052  e01c              B        |L3.142|
                  |L3.84|
;;;328    	}
;;;329    	else if (TIMx == TIM5)
000054  4a15              LDR      r2,|L3.172|
000056  4291              CMP      r1,r2
000058  d101              BNE      |L3.94|
;;;330    	{
;;;331    		ret = GPIO_AF_TIM5;
00005a  2002              MOVS     r0,#2
00005c  e017              B        |L3.142|
                  |L3.94|
;;;332    	}
;;;333    	/* 没有 TIM6 TIM7 */
;;;334    	else if (TIMx == TIM8)
00005e  4a0d              LDR      r2,|L3.148|
000060  4291              CMP      r1,r2
000062  d101              BNE      |L3.104|
;;;335    	{
;;;336    		ret = GPIO_AF_TIM8;
000064  2003              MOVS     r0,#3
000066  e012              B        |L3.142|
                  |L3.104|
;;;337    	}
;;;338    	else if (TIMx == TIM9)
000068  4a0b              LDR      r2,|L3.152|
00006a  4291              CMP      r1,r2
00006c  d101              BNE      |L3.114|
;;;339    	{
;;;340    		ret = GPIO_AF_TIM9;
00006e  2003              MOVS     r0,#3
000070  e00d              B        |L3.142|
                  |L3.114|
;;;341    	}
;;;342    	else if (TIMx == TIM12)
000072  4a0f              LDR      r2,|L3.176|
000074  4291              CMP      r1,r2
000076  d101              BNE      |L3.124|
;;;343    	{
;;;344    		ret = GPIO_AF_TIM12;
000078  2009              MOVS     r0,#9
00007a  e008              B        |L3.142|
                  |L3.124|
;;;345    	}
;;;346    	else if (TIMx == TIM13)
00007c  4a0d              LDR      r2,|L3.180|
00007e  4291              CMP      r1,r2
000080  d101              BNE      |L3.134|
;;;347    	{
;;;348    		ret = GPIO_AF_TIM13;
000082  2009              MOVS     r0,#9
000084  e003              B        |L3.142|
                  |L3.134|
;;;349    	}
;;;350    	else if (TIMx == TIM14)
000086  4a0c              LDR      r2,|L3.184|
000088  4291              CMP      r1,r2
00008a  d100              BNE      |L3.142|
;;;351    	{
;;;352    		ret = GPIO_AF_TIM14;
00008c  2009              MOVS     r0,#9
                  |L3.142|
;;;353    	}
;;;354    
;;;355    	return ret;
;;;356    }
00008e  4770              BX       lr
;;;357    
                          ENDP

                  |L3.144|
                          DCD      0x40010000
                  |L3.148|
                          DCD      0x40010400
                  |L3.152|
                          DCD      0x40014000
                  |L3.156|
                          DCD      0x40014400
                  |L3.160|
                          DCD      0x40014800
                  |L3.164|
                          DCD      0x40000400
                  |L3.168|
                          DCD      0x40000800
                  |L3.172|
                          DCD      0x40000c00
                  |L3.176|
                          DCD      0x40001800
                  |L3.180|
                          DCD      0x40001c00
                  |L3.184|
                          DCD      0x40002000

                          AREA ||i.bsp_GetPinSource||, CODE, READONLY, ALIGN=1

                  bsp_GetPinSource PROC
;;;130    */
;;;131    uint16_t bsp_GetPinSource(uint16_t gpio_pin)
000000  4601              MOV      r1,r0
;;;132    {
;;;133    	uint16_t ret = 0;
000002  2000              MOVS     r0,#0
;;;134    
;;;135    	if (gpio_pin == GPIO_Pin_0)
000004  2901              CMP      r1,#1
000006  d100              BNE      |L4.10|
;;;136    	{
;;;137    		ret = GPIO_PinSource0;
000008  e042              B        |L4.144|
                  |L4.10|
;;;138    	}
;;;139    	else if (gpio_pin == GPIO_Pin_1)
00000a  2902              CMP      r1,#2
00000c  d101              BNE      |L4.18|
;;;140    	{
;;;141    		ret = GPIO_PinSource1;
00000e  2001              MOVS     r0,#1
000010  e03e              B        |L4.144|
                  |L4.18|
;;;142    	}
;;;143    	else if (gpio_pin == GPIO_Pin_2)
000012  2904              CMP      r1,#4
000014  d101              BNE      |L4.26|
;;;144    	{
;;;145    		ret = GPIO_PinSource2;
000016  2002              MOVS     r0,#2
000018  e03a              B        |L4.144|
                  |L4.26|
;;;146    	}
;;;147    	else if (gpio_pin == GPIO_Pin_3)
00001a  2908              CMP      r1,#8
00001c  d101              BNE      |L4.34|
;;;148    	{
;;;149    		ret = GPIO_PinSource3;
00001e  2003              MOVS     r0,#3
000020  e036              B        |L4.144|
                  |L4.34|
;;;150    	}
;;;151    	else if (gpio_pin == GPIO_Pin_4)
000022  2910              CMP      r1,#0x10
000024  d101              BNE      |L4.42|
;;;152    	{
;;;153    		ret = GPIO_PinSource4;
000026  2004              MOVS     r0,#4
000028  e032              B        |L4.144|
                  |L4.42|
;;;154    	}
;;;155    	else if (gpio_pin == GPIO_Pin_5)
00002a  2920              CMP      r1,#0x20
00002c  d101              BNE      |L4.50|
;;;156    	{
;;;157    		ret = GPIO_PinSource5;
00002e  2005              MOVS     r0,#5
000030  e02e              B        |L4.144|
                  |L4.50|
;;;158    	}
;;;159    	else if (gpio_pin == GPIO_Pin_6)
000032  2940              CMP      r1,#0x40
000034  d101              BNE      |L4.58|
;;;160    	{
;;;161    		ret = GPIO_PinSource6;
000036  2006              MOVS     r0,#6
000038  e02a              B        |L4.144|
                  |L4.58|
;;;162    	}
;;;163    	else if (gpio_pin == GPIO_Pin_7)
00003a  2980              CMP      r1,#0x80
00003c  d101              BNE      |L4.66|
;;;164    	{
;;;165    		ret = GPIO_PinSource7;
00003e  2007              MOVS     r0,#7
000040  e026              B        |L4.144|
                  |L4.66|
;;;166    	}
;;;167    	else if (gpio_pin == GPIO_Pin_8)
000042  f5b17f80          CMP      r1,#0x100
000046  d101              BNE      |L4.76|
;;;168    	{
;;;169    		ret = GPIO_PinSource8;
000048  2008              MOVS     r0,#8
00004a  e021              B        |L4.144|
                  |L4.76|
;;;170    	}
;;;171    	else if (gpio_pin == GPIO_Pin_9)
00004c  f5b17f00          CMP      r1,#0x200
000050  d101              BNE      |L4.86|
;;;172    	{
;;;173    		ret = GPIO_PinSource9;
000052  2009              MOVS     r0,#9
000054  e01c              B        |L4.144|
                  |L4.86|
;;;174    	}
;;;175    	else if (gpio_pin == GPIO_Pin_10)
000056  f5b16f80          CMP      r1,#0x400
00005a  d101              BNE      |L4.96|
;;;176    	{
;;;177    		ret = GPIO_PinSource10;
00005c  200a              MOVS     r0,#0xa
00005e  e017              B        |L4.144|
                  |L4.96|
;;;178    	}
;;;179    	else if (gpio_pin == GPIO_Pin_11)
000060  f5b16f00          CMP      r1,#0x800
000064  d101              BNE      |L4.106|
;;;180    	{
;;;181    		ret = GPIO_PinSource11;
000066  200b              MOVS     r0,#0xb
000068  e012              B        |L4.144|
                  |L4.106|
;;;182    	}
;;;183    	else if (gpio_pin == GPIO_Pin_12)
00006a  f5b15f80          CMP      r1,#0x1000
00006e  d101              BNE      |L4.116|
;;;184    	{
;;;185    		ret = GPIO_PinSource12;
000070  200c              MOVS     r0,#0xc
000072  e00d              B        |L4.144|
                  |L4.116|
;;;186    	}
;;;187    	else if (gpio_pin == GPIO_Pin_13)
000074  f5b15f00          CMP      r1,#0x2000
000078  d101              BNE      |L4.126|
;;;188    	{
;;;189    		ret = GPIO_PinSource13;
00007a  200d              MOVS     r0,#0xd
00007c  e008              B        |L4.144|
                  |L4.126|
;;;190    	}
;;;191    	else if (gpio_pin == GPIO_Pin_14)
00007e  f5b14f80          CMP      r1,#0x4000
000082  d101              BNE      |L4.136|
;;;192    	{
;;;193    		ret = GPIO_PinSource14;
000084  200e              MOVS     r0,#0xe
000086  e003              B        |L4.144|
                  |L4.136|
;;;194    	}
;;;195    	else if (gpio_pin == GPIO_Pin_15)
000088  f5b14f00          CMP      r1,#0x8000
00008c  d100              BNE      |L4.144|
;;;196    	{
;;;197    		ret = GPIO_PinSource15;
00008e  200f              MOVS     r0,#0xf
                  |L4.144|
;;;198    	}
;;;199    
;;;200    	return ret;
;;;201    }
000090  4770              BX       lr
;;;202    
                          ENDP


                          AREA ||i.bsp_GetRCCofGPIO||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofGPIO PROC
;;;78     */
;;;79     uint32_t bsp_GetRCCofGPIO(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	uint32_t rcc = 0;
000002  2000              MOVS     r0,#0
;;;82     
;;;83     	if (GPIOx == GPIOA)
000004  4a16              LDR      r2,|L5.96|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L5.14|
;;;84     	{
;;;85     		rcc = RCC_AHB1Periph_GPIOA;
00000a  2001              MOVS     r0,#1
00000c  e026              B        |L5.92|
                  |L5.14|
;;;86     	}
;;;87     	else if (GPIOx == GPIOB)
00000e  4a15              LDR      r2,|L5.100|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L5.24|
;;;88     	{
;;;89     		rcc = RCC_AHB1Periph_GPIOB;
000014  2002              MOVS     r0,#2
000016  e021              B        |L5.92|
                  |L5.24|
;;;90     	}
;;;91     	else if (GPIOx == GPIOC)
000018  4a13              LDR      r2,|L5.104|
00001a  4291              CMP      r1,r2
00001c  d101              BNE      |L5.34|
;;;92     	{
;;;93     		rcc = RCC_AHB1Periph_GPIOC;
00001e  2004              MOVS     r0,#4
000020  e01c              B        |L5.92|
                  |L5.34|
;;;94     	}
;;;95     	else if (GPIOx == GPIOD)
000022  4a12              LDR      r2,|L5.108|
000024  4291              CMP      r1,r2
000026  d101              BNE      |L5.44|
;;;96     	{
;;;97     		rcc = RCC_AHB1Periph_GPIOD;
000028  2008              MOVS     r0,#8
00002a  e017              B        |L5.92|
                  |L5.44|
;;;98     	}
;;;99     	else if (GPIOx == GPIOE)
00002c  4a10              LDR      r2,|L5.112|
00002e  4291              CMP      r1,r2
000030  d101              BNE      |L5.54|
;;;100    	{
;;;101    		rcc = RCC_AHB1Periph_GPIOE;
000032  2010              MOVS     r0,#0x10
000034  e012              B        |L5.92|
                  |L5.54|
;;;102    	}
;;;103    	else if (GPIOx == GPIOF)
000036  4a0f              LDR      r2,|L5.116|
000038  4291              CMP      r1,r2
00003a  d101              BNE      |L5.64|
;;;104    	{
;;;105    		rcc = RCC_AHB1Periph_GPIOF;
00003c  2020              MOVS     r0,#0x20
00003e  e00d              B        |L5.92|
                  |L5.64|
;;;106    	}
;;;107    	else if (GPIOx == GPIOG)
000040  4a0d              LDR      r2,|L5.120|
000042  4291              CMP      r1,r2
000044  d101              BNE      |L5.74|
;;;108    	{
;;;109    		rcc = RCC_AHB1Periph_GPIOG;
000046  2040              MOVS     r0,#0x40
000048  e008              B        |L5.92|
                  |L5.74|
;;;110    	}
;;;111    	else if (GPIOx == GPIOH)
00004a  4a0c              LDR      r2,|L5.124|
00004c  4291              CMP      r1,r2
00004e  d101              BNE      |L5.84|
;;;112    	{
;;;113    		rcc = RCC_AHB1Periph_GPIOH;
000050  2080              MOVS     r0,#0x80
000052  e003              B        |L5.92|
                  |L5.84|
;;;114    	}
;;;115    	else if (GPIOx == GPIOI)
000054  4a0a              LDR      r2,|L5.128|
000056  4291              CMP      r1,r2
000058  d100              BNE      |L5.92|
;;;116    	{
;;;117    		rcc = RCC_AHB1Periph_GPIOI;
00005a  1588              ASRS     r0,r1,#22
                  |L5.92|
;;;118    	}
;;;119    
;;;120    	return rcc;
;;;121    }
00005c  4770              BX       lr
;;;122    
                          ENDP

00005e  0000              DCW      0x0000
                  |L5.96|
                          DCD      0x40020000
                  |L5.100|
                          DCD      0x40020400
                  |L5.104|
                          DCD      0x40020800
                  |L5.108|
                          DCD      0x40020c00
                  |L5.112|
                          DCD      0x40021000
                  |L5.116|
                          DCD      0x40021400
                  |L5.120|
                          DCD      0x40021800
                  |L5.124|
                          DCD      0x40021c00
                  |L5.128|
                          DCD      0x40022000

                          AREA ||i.bsp_GetRCCofTIM||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofTIM PROC
;;;210    */
;;;211    uint32_t bsp_GetRCCofTIM(TIM_TypeDef* TIMx)
000000  4601              MOV      r1,r0
;;;212    {
;;;213    	uint32_t rcc = 0;
000002  2000              MOVS     r0,#0
;;;214    
;;;215    	/*
;;;216    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13, TIM14
;;;217    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;218    	*/
;;;219    	if (TIMx == TIM1)
000004  4a24              LDR      r2,|L6.152|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L6.14|
;;;220    	{
;;;221    		rcc = RCC_APB2Periph_TIM1;
00000a  2001              MOVS     r0,#1
00000c  e042              B        |L6.148|
                  |L6.14|
;;;222    	}
;;;223    	else if (TIMx == TIM8)
00000e  4a23              LDR      r2,|L6.156|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L6.24|
;;;224    	{
;;;225    		rcc = RCC_APB2Periph_TIM8;
000014  2002              MOVS     r0,#2
000016  e03d              B        |L6.148|
                  |L6.24|
;;;226    	}
;;;227    	else if (TIMx == TIM9)
000018  4a21              LDR      r2,|L6.160|
00001a  4291              CMP      r1,r2
00001c  d102              BNE      |L6.36|
;;;228    	{
;;;229    		rcc = RCC_APB2Periph_TIM9;
00001e  f44f3080          MOV      r0,#0x10000
000022  e037              B        |L6.148|
                  |L6.36|
;;;230    	}
;;;231    	else if (TIMx == TIM10)
000024  4a1f              LDR      r2,|L6.164|
000026  4291              CMP      r1,r2
000028  d102              BNE      |L6.48|
;;;232    	{
;;;233    		rcc = RCC_APB2Periph_TIM10;
00002a  f44f3000          MOV      r0,#0x20000
00002e  e031              B        |L6.148|
                  |L6.48|
;;;234    	}
;;;235    	else if (TIMx == TIM11)
000030  4a1d              LDR      r2,|L6.168|
000032  4291              CMP      r1,r2
000034  d102              BNE      |L6.60|
;;;236    	{
;;;237    		rcc = RCC_APB2Periph_TIM11;
000036  f44f2080          MOV      r0,#0x40000
00003a  e02b              B        |L6.148|
                  |L6.60|
;;;238    	}
;;;239    	/* 下面是 APB1时钟 */
;;;240    	else if (TIMx == TIM2)
00003c  f1b14f80          CMP      r1,#0x40000000
000040  d101              BNE      |L6.70|
;;;241    	{
;;;242    		rcc = RCC_APB1Periph_TIM2;
000042  2001              MOVS     r0,#1
000044  e026              B        |L6.148|
                  |L6.70|
;;;243    	}
;;;244    	else if (TIMx == TIM3)
000046  4a19              LDR      r2,|L6.172|
000048  4291              CMP      r1,r2
00004a  d101              BNE      |L6.80|
;;;245    	{
;;;246    		rcc = RCC_APB1Periph_TIM3;
00004c  2002              MOVS     r0,#2
00004e  e021              B        |L6.148|
                  |L6.80|
;;;247    	}
;;;248    	else if (TIMx == TIM4)
000050  4a17              LDR      r2,|L6.176|
000052  4291              CMP      r1,r2
000054  d101              BNE      |L6.90|
;;;249    	{
;;;250    		rcc = RCC_APB1Periph_TIM4;
000056  2004              MOVS     r0,#4
000058  e01c              B        |L6.148|
                  |L6.90|
;;;251    	}
;;;252    	else if (TIMx == TIM5)
00005a  4a16              LDR      r2,|L6.180|
00005c  4291              CMP      r1,r2
00005e  d101              BNE      |L6.100|
;;;253    	{
;;;254    		rcc = RCC_APB1Periph_TIM5;
000060  2008              MOVS     r0,#8
000062  e017              B        |L6.148|
                  |L6.100|
;;;255    	}
;;;256    	else if (TIMx == TIM6)
000064  4a14              LDR      r2,|L6.184|
000066  4291              CMP      r1,r2
000068  d101              BNE      |L6.110|
;;;257    	{
;;;258    		rcc = RCC_APB1Periph_TIM6;
00006a  2010              MOVS     r0,#0x10
00006c  e012              B        |L6.148|
                  |L6.110|
;;;259    	}
;;;260    	else if (TIMx == TIM7)
00006e  4a13              LDR      r2,|L6.188|
000070  4291              CMP      r1,r2
000072  d101              BNE      |L6.120|
;;;261    	{
;;;262    		rcc = RCC_APB1Periph_TIM7;
000074  2020              MOVS     r0,#0x20
000076  e00d              B        |L6.148|
                  |L6.120|
;;;263    	}
;;;264    	else if (TIMx == TIM12)
000078  4a11              LDR      r2,|L6.192|
00007a  4291              CMP      r1,r2
00007c  d101              BNE      |L6.130|
;;;265    	{
;;;266    		rcc = RCC_APB1Periph_TIM12;
00007e  2040              MOVS     r0,#0x40
000080  e008              B        |L6.148|
                  |L6.130|
;;;267    	}
;;;268    	else if (TIMx == TIM13)
000082  4a10              LDR      r2,|L6.196|
000084  4291              CMP      r1,r2
000086  d101              BNE      |L6.140|
;;;269    	{
;;;270    		rcc = RCC_APB1Periph_TIM13;
000088  2080              MOVS     r0,#0x80
00008a  e003              B        |L6.148|
                  |L6.140|
;;;271    	}
;;;272    	else if (TIMx == TIM14)
00008c  4a0e              LDR      r2,|L6.200|
00008e  4291              CMP      r1,r2
000090  d100              BNE      |L6.148|
;;;273    	{
;;;274    		rcc = RCC_APB1Periph_TIM14;
000092  1588              ASRS     r0,r1,#22
                  |L6.148|
;;;275    	}
;;;276    
;;;277    	return rcc;
;;;278    }
000094  4770              BX       lr
;;;279    
                          ENDP

000096  0000              DCW      0x0000
                  |L6.152|
                          DCD      0x40010000
                  |L6.156|
                          DCD      0x40010400
                  |L6.160|
                          DCD      0x40014000
                  |L6.164|
                          DCD      0x40014400
                  |L6.168|
                          DCD      0x40014800
                  |L6.172|
                          DCD      0x40000400
                  |L6.176|
                          DCD      0x40000800
                  |L6.180|
                          DCD      0x40000c00
                  |L6.184|
                          DCD      0x40001000
                  |L6.188|
                          DCD      0x40001400
                  |L6.192|
                          DCD      0x40001800
                  |L6.196|
                          DCD      0x40001c00
                  |L6.200|
                          DCD      0x40002000

                          AREA ||i.bsp_SetTIMOutPWM||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM PROC
;;;432    */
;;;433    void bsp_SetTIMOutPWM(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TIM_TypeDef* TIMx, uint8_t _ucChannel,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;434    	 uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;435    {
000004  b089              SUB      sp,sp,#0x24
000006  4683              MOV      r11,r0
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  e9dd6a16          LDRD     r6,r10,[sp,#0x58]
;;;436    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;437    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;438    	uint16_t usPeriod;
;;;439    	uint16_t usPrescaler;
;;;440    	uint32_t uiTIMxCLK;
;;;441    
;;;442    	if (_ulDutyCycle == 0)
000010  f1ba0f00          CMP      r10,#0
000014  d10f              BNE      |L7.54|
;;;443    	{		
;;;444    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       TIM_Cmd
;;;445    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
00001e  4658              MOV      r0,r11
000020  990a              LDR      r1,[sp,#0x28]
000022  f7fffffe          BL       bsp_ConfigGpioOut
;;;446    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_RESET);	/* PWM = 0 */		
000026  2200              MOVS     r2,#0
000028  4658              MOV      r0,r11
00002a  990a              LDR      r1,[sp,#0x28]
00002c  f7fffffe          BL       GPIO_WriteBit
                  |L7.48|
;;;447    		return;
;;;448    	}
;;;449    	else if (_ulDutyCycle == 10000)
;;;450    	{
;;;451    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
;;;452    
;;;453    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
;;;454    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);	/* PWM = 1 */	
;;;455    		return;
;;;456    	}
;;;457    	
;;;458    
;;;459    	bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);	/* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;460    	
;;;461        /*-----------------------------------------------------------------------
;;;462    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;463    
;;;464    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;465    		PCLK2 = HCLK / 2      (APB2Periph)
;;;466    		PCLK1 = HCLK / 4      (APB1Periph)
;;;467    
;;;468    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;469    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;470    
;;;471    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;472    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;473    
;;;474    	----------------------------------------------------------------------- */
;;;475    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;476    	{
;;;477    		/* APB2 定时器 */
;;;478    		uiTIMxCLK = SystemCoreClock;
;;;479    	}
;;;480    	else	/* APB1 定时器 */
;;;481    	{
;;;482    		uiTIMxCLK = SystemCoreClock / 2;
;;;483    	}
;;;484    
;;;485    	if (_ulFreq < 100)
;;;486    	{
;;;487    		usPrescaler = 10000 - 1;					/* 分频比 = 10000 */
;;;488    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;489    	}
;;;490    	else if (_ulFreq < 3000)
;;;491    	{
;;;492    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;493    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;494    	}
;;;495    	else	/* 大于4K的频率，无需分频 */
;;;496    	{
;;;497    		usPrescaler = 0;					/* 分频比 = 1 */
;;;498    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;499    	}
;;;500    
;;;501    	/* Time base configuration */
;;;502    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;503    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;504    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;505    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;506    
;;;507    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;508    
;;;509    	/* PWM1 Mode configuration: Channel1 */
;;;510    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;511    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
;;;512    	TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod) / 10000;
;;;513    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;514    
;;;515    	if (_ucChannel == 1)
;;;516    	{
;;;517    		TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;518    		TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;519    	}
;;;520    	else if (_ucChannel == 2)
;;;521    	{
;;;522    		TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;523    		TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;524    	}
;;;525    	else if (_ucChannel == 3)
;;;526    	{
;;;527    		TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;528    		TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;529    	}
;;;530    	else if (_ucChannel == 4)
;;;531    	{
;;;532    		TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;533    		TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;534    	}
;;;535    
;;;536    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;537    
;;;538    	/* TIMx enable counter */
;;;539    	TIM_Cmd(TIMx, ENABLE);
;;;540    
;;;541    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;542    	if ((TIMx == TIM1) || (TIMx == TIM8))
;;;543    	{
;;;544    		TIM_CtrlPWMOutputs(TIM1, ENABLE);
;;;545    	}
;;;546    }
000030  b00d              ADD      sp,sp,#0x34
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.54|
000036  f2427010          MOV      r0,#0x2710            ;449
00003a  4582              CMP      r10,r0                ;449
00003c  d10d              BNE      |L7.90|
00003e  2100              MOVS     r1,#0                 ;451
000040  4620              MOV      r0,r4                 ;451
000042  f7fffffe          BL       TIM_Cmd
000046  4658              MOV      r0,r11                ;453
000048  990a              LDR      r1,[sp,#0x28]         ;453
00004a  f7fffffe          BL       bsp_ConfigGpioOut
00004e  2201              MOVS     r2,#1                 ;454
000050  4658              MOV      r0,r11                ;454
000052  990a              LDR      r1,[sp,#0x28]         ;454
000054  f7fffffe          BL       GPIO_WriteBit
000058  e7ea              B        |L7.48|
                  |L7.90|
00005a  462b              MOV      r3,r5                 ;459
00005c  4622              MOV      r2,r4                 ;459
00005e  4658              MOV      r0,r11                ;459
000060  990a              LDR      r1,[sp,#0x28]         ;459
000062  f7fffffe          BL       bsp_ConfigTimGpio
000066  4849              LDR      r0,|L7.396|
000068  4284              CMP      r4,r0                 ;475
00006a  d00b              BEQ      |L7.132|
00006c  4848              LDR      r0,|L7.400|
00006e  4284              CMP      r4,r0                 ;475
000070  d008              BEQ      |L7.132|
000072  4848              LDR      r0,|L7.404|
000074  4284              CMP      r4,r0                 ;475
000076  d005              BEQ      |L7.132|
000078  4847              LDR      r0,|L7.408|
00007a  4284              CMP      r4,r0                 ;475
00007c  d002              BEQ      |L7.132|
00007e  4847              LDR      r0,|L7.412|
000080  4284              CMP      r4,r0                 ;475
000082  d103              BNE      |L7.140|
                  |L7.132|
000084  4846              LDR      r0,|L7.416|
000086  f8d08000          LDR      r8,[r0,#0]            ;478  ; SystemCoreClock
00008a  e003              B        |L7.148|
                  |L7.140|
00008c  4844              LDR      r0,|L7.416|
00008e  6800              LDR      r0,[r0,#0]            ;482  ; SystemCoreClock
000090  ea4f0850          LSR      r8,r0,#1              ;482
                  |L7.148|
000094  2e64              CMP      r6,#0x64              ;485
000096  d20a              BCS      |L7.174|
000098  f242790f          MOV      r9,#0x270f            ;487
00009c  f2427010          MOV      r0,#0x2710            ;488
0000a0  fbb8f0f0          UDIV     r0,r8,r0              ;488
0000a4  fbb0f0f6          UDIV     r0,r0,r6              ;488
0000a8  1e40              SUBS     r0,r0,#1              ;488
0000aa  b287              UXTH     r7,r0                 ;488
0000ac  e013              B        |L7.214|
                  |L7.174|
0000ae  f64030b8          MOV      r0,#0xbb8             ;490
0000b2  4286              CMP      r6,r0                 ;490
0000b4  d209              BCS      |L7.202|
0000b6  f04f0963          MOV      r9,#0x63              ;492
0000ba  2064              MOVS     r0,#0x64              ;493
0000bc  fbb8f0f0          UDIV     r0,r8,r0              ;493
0000c0  fbb0f0f6          UDIV     r0,r0,r6              ;493
0000c4  1e40              SUBS     r0,r0,#1              ;493
0000c6  b287              UXTH     r7,r0                 ;493
0000c8  e005              B        |L7.214|
                  |L7.202|
0000ca  f04f0900          MOV      r9,#0                 ;497
0000ce  fbb8f0f6          UDIV     r0,r8,r6              ;498
0000d2  1e40              SUBS     r0,r0,#1              ;498
0000d4  b287              UXTH     r7,r0                 ;498
                  |L7.214|
0000d6  9707              STR      r7,[sp,#0x1c]         ;502
0000d8  f8ad9018          STRH     r9,[sp,#0x18]         ;503
0000dc  2000              MOVS     r0,#0                 ;504
0000de  f8ad0020          STRH     r0,[sp,#0x20]         ;504
0000e2  f8ad001a          STRH     r0,[sp,#0x1a]         ;505
0000e6  a906              ADD      r1,sp,#0x18           ;507
0000e8  4620              MOV      r0,r4                 ;507
0000ea  f7fffffe          BL       TIM_TimeBaseInit
0000ee  2060              MOVS     r0,#0x60              ;510
0000f0  f8ad0004          STRH     r0,[sp,#4]            ;510
0000f4  2001              MOVS     r0,#1                 ;511
0000f6  f8ad0006          STRH     r0,[sp,#6]            ;511
0000fa  fb0af007          MUL      r0,r10,r7             ;512
0000fe  f2427110          MOV      r1,#0x2710            ;512
000102  fbb0f0f1          UDIV     r0,r0,r1              ;512
000106  9003              STR      r0,[sp,#0xc]          ;512
000108  2000              MOVS     r0,#0                 ;513
00010a  f8ad0010          STRH     r0,[sp,#0x10]         ;513
00010e  2d01              CMP      r5,#1                 ;515
000110  d108              BNE      |L7.292|
000112  a901              ADD      r1,sp,#4              ;517
000114  4620              MOV      r0,r4                 ;517
000116  f7fffffe          BL       TIM_OC1Init
00011a  2108              MOVS     r1,#8                 ;518
00011c  4620              MOV      r0,r4                 ;518
00011e  f7fffffe          BL       TIM_OC1PreloadConfig
000122  e01f              B        |L7.356|
                  |L7.292|
000124  2d02              CMP      r5,#2                 ;520
000126  d108              BNE      |L7.314|
000128  a901              ADD      r1,sp,#4              ;522
00012a  4620              MOV      r0,r4                 ;522
00012c  f7fffffe          BL       TIM_OC2Init
000130  2108              MOVS     r1,#8                 ;523
000132  4620              MOV      r0,r4                 ;523
000134  f7fffffe          BL       TIM_OC2PreloadConfig
000138  e014              B        |L7.356|
                  |L7.314|
00013a  2d03              CMP      r5,#3                 ;525
00013c  d108              BNE      |L7.336|
00013e  a901              ADD      r1,sp,#4              ;527
000140  4620              MOV      r0,r4                 ;527
000142  f7fffffe          BL       TIM_OC3Init
000146  2108              MOVS     r1,#8                 ;528
000148  4620              MOV      r0,r4                 ;528
00014a  f7fffffe          BL       TIM_OC3PreloadConfig
00014e  e009              B        |L7.356|
                  |L7.336|
000150  2d04              CMP      r5,#4                 ;530
000152  d107              BNE      |L7.356|
000154  a901              ADD      r1,sp,#4              ;532
000156  4620              MOV      r0,r4                 ;532
000158  f7fffffe          BL       TIM_OC4Init
00015c  2108              MOVS     r1,#8                 ;533
00015e  4620              MOV      r0,r4                 ;533
000160  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L7.356|
000164  2101              MOVS     r1,#1                 ;536
000166  4620              MOV      r0,r4                 ;536
000168  f7fffffe          BL       TIM_ARRPreloadConfig
00016c  2101              MOVS     r1,#1                 ;539
00016e  4620              MOV      r0,r4                 ;539
000170  f7fffffe          BL       TIM_Cmd
000174  4805              LDR      r0,|L7.396|
000176  4284              CMP      r4,r0                 ;542
000178  d002              BEQ      |L7.384|
00017a  4805              LDR      r0,|L7.400|
00017c  4284              CMP      r4,r0                 ;542
00017e  d103              BNE      |L7.392|
                  |L7.384|
000180  2101              MOVS     r1,#1                 ;544
000182  4802              LDR      r0,|L7.396|
000184  f7fffffe          BL       TIM_CtrlPWMOutputs
                  |L7.392|
000188  bf00              NOP      
00018a  e751              B        |L7.48|
;;;547    
                          ENDP

                  |L7.396|
                          DCD      0x40010000
                  |L7.400|
                          DCD      0x40010400
                  |L7.404|
                          DCD      0x40014000
                  |L7.408|
                          DCD      0x40014400
                  |L7.412|
                          DCD      0x40014800
                  |L7.416|
                          DCD      SystemCoreClock

                          AREA ||i.bsp_SetTIMforInt||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMforInt PROC
;;;558    */
;;;559    void bsp_SetTIMforInt(TIM_TypeDef* TIMx, uint32_t _ulFreq, uint8_t _PreemptionPriority, uint8_t _SubPriority)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;560    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;561    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;562    	uint16_t usPeriod;
;;;563    	uint16_t usPrescaler;
;;;564    	uint32_t uiTIMxCLK;
;;;565    
;;;566      	/* 使能TIM时钟 */
;;;567    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
00000c  486e              LDR      r0,|L8.456|
00000e  4284              CMP      r4,r0
000010  d00b              BEQ      |L8.42|
000012  486e              LDR      r0,|L8.460|
000014  4284              CMP      r4,r0
000016  d008              BEQ      |L8.42|
000018  486d              LDR      r0,|L8.464|
00001a  4284              CMP      r4,r0
00001c  d005              BEQ      |L8.42|
00001e  486d              LDR      r0,|L8.468|
000020  4284              CMP      r4,r0
000022  d002              BEQ      |L8.42|
000024  486c              LDR      r0,|L8.472|
000026  4284              CMP      r4,r0
000028  d107              BNE      |L8.58|
                  |L8.42|
;;;568    	{
;;;569    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       bsp_GetRCCofTIM
000030  4683              MOV      r11,r0
000032  2101              MOVS     r1,#1
000034  f7fffffe          BL       RCC_APB2PeriphClockCmd
000038  e006              B        |L8.72|
                  |L8.58|
;;;570    	}
;;;571    	else
;;;572    	{
;;;573    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       bsp_GetRCCofTIM
000040  4683              MOV      r11,r0
000042  2101              MOVS     r1,#1
000044  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L8.72|
;;;574    	}
;;;575    
;;;576    	if (_ulFreq == 0)
000048  b92d              CBNZ     r5,|L8.86|
;;;577    	{
;;;578    		TIM_Cmd(TIMx, DISABLE);		/* 关闭定时输出 */
00004a  2100              MOVS     r1,#0
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       TIM_Cmd
                  |L8.82|
;;;579    		return;
;;;580    	}
;;;581    
;;;582        /*-----------------------------------------------------------------------
;;;583    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;584    
;;;585    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;586    		PCLK2 = HCLK / 2      (APB2Periph)
;;;587    		PCLK1 = HCLK / 4      (APB1Periph)
;;;588    
;;;589    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;590    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;591    
;;;592    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;593    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;594    
;;;595    	----------------------------------------------------------------------- */
;;;596    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;597    	{
;;;598    		/* APB2 定时器 */
;;;599    		uiTIMxCLK = SystemCoreClock;
;;;600    	}
;;;601    	else	/* APB1 定时器 */
;;;602    	{
;;;603    		uiTIMxCLK = SystemCoreClock / 2;
;;;604    	}
;;;605    
;;;606    	if (_ulFreq < 100)
;;;607    	{
;;;608    		usPrescaler = 10000 - 1;					/* 分频比 = 1000 */
;;;609    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;610    	}
;;;611    	else if (_ulFreq < 3000)
;;;612    	{
;;;613    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;614    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;615    	}
;;;616    	else	/* 大于4K的频率，无需分频 */
;;;617    	{
;;;618    		usPrescaler = 0;					/* 分频比 = 1 */
;;;619    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;620    	}
;;;621    
;;;622    	/* Time base configuration */
;;;623    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;624    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;625    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;626    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;627    
;;;628    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;629    
;;;630    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;631    
;;;632    	/* TIM Interrupts enable */
;;;633    	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
;;;634    
;;;635    	/* TIMx enable counter */
;;;636    	TIM_Cmd(TIMx, ENABLE);
;;;637    
;;;638    	/* 配置TIM定时更新中断 (Update) */
;;;639    	{
;;;640    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;641    		uint8_t irq = 0;	/* 中断号, 定义在 stm32f4xx.h */
;;;642    
;;;643    		if ((TIMx == TIM1) || (TIMx == TIM10))
;;;644    			irq = TIM1_UP_TIM10_IRQn;
;;;645    		else if (TIMx == TIM2)
;;;646    			irq = TIM2_IRQn;
;;;647    		else if (TIMx == TIM3)
;;;648    			irq = TIM3_IRQn;
;;;649    		else if (TIMx == TIM4)
;;;650    			irq = TIM4_IRQn;
;;;651    		else if (TIMx == TIM5)
;;;652    			irq = TIM5_IRQn;
;;;653    		else if (TIMx == TIM6)
;;;654    			irq = TIM6_DAC_IRQn;
;;;655    		else if (TIMx == TIM7)
;;;656    			irq = TIM7_IRQn;
;;;657    		else if (TIMx == TIM7)
;;;658    			irq = TIM7_IRQn;
;;;659    		else if (TIMx == TIM7)
;;;660    			irq = TIM7_IRQn;
;;;661    		else if ((TIMx == TIM8) || (TIMx == TIM13))
;;;662    			irq = TIM8_UP_TIM13_IRQn;
;;;663    		else if (TIMx == TIM9)
;;;664    			irq = TIM1_BRK_TIM9_IRQn;
;;;665    		else if (TIMx == TIM11)
;;;666    			irq = TIM1_TRG_COM_TIM11_IRQn;
;;;667    		else if (TIMx == TIM12)
;;;668    			irq = TIM8_BRK_TIM12_IRQn;
;;;669    		else if (TIMx == TIM12)
;;;670    			irq = TIM8_TRG_COM_TIM14_IRQn;
;;;671    
;;;672    		NVIC_InitStructure.NVIC_IRQChannel = irq;
;;;673    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = _PreemptionPriority;
;;;674    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = _SubPriority;
;;;675    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;676    		NVIC_Init(&NVIC_InitStructure);
;;;677    	}
;;;678    }
000052  e8bd9fff          POP      {r0-r12,pc}
                  |L8.86|
000056  485c              LDR      r0,|L8.456|
000058  4284              CMP      r4,r0                 ;596
00005a  d00b              BEQ      |L8.116|
00005c  485b              LDR      r0,|L8.460|
00005e  4284              CMP      r4,r0                 ;596
000060  d008              BEQ      |L8.116|
000062  485b              LDR      r0,|L8.464|
000064  4284              CMP      r4,r0                 ;596
000066  d005              BEQ      |L8.116|
000068  485a              LDR      r0,|L8.468|
00006a  4284              CMP      r4,r0                 ;596
00006c  d002              BEQ      |L8.116|
00006e  485a              LDR      r0,|L8.472|
000070  4284              CMP      r4,r0                 ;596
000072  d102              BNE      |L8.122|
                  |L8.116|
000074  4859              LDR      r0,|L8.476|
000076  6806              LDR      r6,[r0,#0]            ;599  ; SystemCoreClock
000078  e002              B        |L8.128|
                  |L8.122|
00007a  4858              LDR      r0,|L8.476|
00007c  6800              LDR      r0,[r0,#0]            ;603  ; SystemCoreClock
00007e  0846              LSRS     r6,r0,#1              ;603
                  |L8.128|
000080  2d64              CMP      r5,#0x64              ;606
000082  d20a              BCS      |L8.154|
000084  f242780f          MOV      r8,#0x270f            ;608
000088  f2427010          MOV      r0,#0x2710            ;609
00008c  fbb6f0f0          UDIV     r0,r6,r0              ;609
000090  fbb0f0f5          UDIV     r0,r0,r5              ;609
000094  1e40              SUBS     r0,r0,#1              ;609
000096  b287              UXTH     r7,r0                 ;609
000098  e013              B        |L8.194|
                  |L8.154|
00009a  f64030b8          MOV      r0,#0xbb8             ;611
00009e  4285              CMP      r5,r0                 ;611
0000a0  d209              BCS      |L8.182|
0000a2  f04f0863          MOV      r8,#0x63              ;613
0000a6  2064              MOVS     r0,#0x64              ;614
0000a8  fbb6f0f0          UDIV     r0,r6,r0              ;614
0000ac  fbb0f0f5          UDIV     r0,r0,r5              ;614
0000b0  1e40              SUBS     r0,r0,#1              ;614
0000b2  b287              UXTH     r7,r0                 ;614
0000b4  e005              B        |L8.194|
                  |L8.182|
0000b6  f04f0800          MOV      r8,#0                 ;618
0000ba  fbb6f0f5          UDIV     r0,r6,r5              ;619
0000be  1e40              SUBS     r0,r0,#1              ;619
0000c0  b287              UXTH     r7,r0                 ;619
                  |L8.194|
0000c2  9702              STR      r7,[sp,#8]            ;623
0000c4  f8ad8004          STRH     r8,[sp,#4]            ;624
0000c8  2000              MOVS     r0,#0                 ;625
0000ca  f8ad000c          STRH     r0,[sp,#0xc]          ;625
0000ce  f8ad0006          STRH     r0,[sp,#6]            ;626
0000d2  a901              ADD      r1,sp,#4              ;628
0000d4  4620              MOV      r0,r4                 ;628
0000d6  f7fffffe          BL       TIM_TimeBaseInit
0000da  2101              MOVS     r1,#1                 ;630
0000dc  4620              MOV      r0,r4                 ;630
0000de  f7fffffe          BL       TIM_ARRPreloadConfig
0000e2  2201              MOVS     r2,#1                 ;633
0000e4  4611              MOV      r1,r2                 ;633
0000e6  4620              MOV      r0,r4                 ;633
0000e8  f7fffffe          BL       TIM_ITConfig
0000ec  2101              MOVS     r1,#1                 ;636
0000ee  4620              MOV      r0,r4                 ;636
0000f0  f7fffffe          BL       TIM_Cmd
0000f4  f04f0b00          MOV      r11,#0                ;641
0000f8  4833              LDR      r0,|L8.456|
0000fa  4284              CMP      r4,r0                 ;643
0000fc  d002              BEQ      |L8.260|
0000fe  4835              LDR      r0,|L8.468|
000100  4284              CMP      r4,r0                 ;643
000102  d102              BNE      |L8.266|
                  |L8.260|
000104  f04f0b19          MOV      r11,#0x19             ;644
000108  e04f              B        |L8.426|
                  |L8.266|
00010a  f1b44f80          CMP      r4,#0x40000000        ;645
00010e  d102              BNE      |L8.278|
000110  f04f0b1c          MOV      r11,#0x1c             ;646
000114  e049              B        |L8.426|
                  |L8.278|
000116  4832              LDR      r0,|L8.480|
000118  4284              CMP      r4,r0                 ;647
00011a  d102              BNE      |L8.290|
00011c  f04f0b1d          MOV      r11,#0x1d             ;648
000120  e043              B        |L8.426|
                  |L8.290|
000122  4830              LDR      r0,|L8.484|
000124  4284              CMP      r4,r0                 ;649
000126  d102              BNE      |L8.302|
000128  f04f0b1e          MOV      r11,#0x1e             ;650
00012c  e03d              B        |L8.426|
                  |L8.302|
00012e  482e              LDR      r0,|L8.488|
000130  4284              CMP      r4,r0                 ;651
000132  d102              BNE      |L8.314|
000134  f04f0b32          MOV      r11,#0x32             ;652
000138  e037              B        |L8.426|
                  |L8.314|
00013a  482c              LDR      r0,|L8.492|
00013c  4284              CMP      r4,r0                 ;653
00013e  d102              BNE      |L8.326|
000140  f04f0b36          MOV      r11,#0x36             ;654
000144  e031              B        |L8.426|
                  |L8.326|
000146  482a              LDR      r0,|L8.496|
000148  4284              CMP      r4,r0                 ;655
00014a  d102              BNE      |L8.338|
00014c  f04f0b37          MOV      r11,#0x37             ;656
000150  e02b              B        |L8.426|
                  |L8.338|
000152  4827              LDR      r0,|L8.496|
000154  4284              CMP      r4,r0                 ;657
000156  d102              BNE      |L8.350|
000158  f04f0b37          MOV      r11,#0x37             ;658
00015c  e025              B        |L8.426|
                  |L8.350|
00015e  4824              LDR      r0,|L8.496|
000160  4284              CMP      r4,r0                 ;659
000162  d102              BNE      |L8.362|
000164  f04f0b37          MOV      r11,#0x37             ;660
000168  e01f              B        |L8.426|
                  |L8.362|
00016a  4818              LDR      r0,|L8.460|
00016c  4284              CMP      r4,r0                 ;661
00016e  d002              BEQ      |L8.374|
000170  4820              LDR      r0,|L8.500|
000172  4284              CMP      r4,r0                 ;661
000174  d102              BNE      |L8.380|
                  |L8.374|
000176  f04f0b2c          MOV      r11,#0x2c             ;662
00017a  e016              B        |L8.426|
                  |L8.380|
00017c  4814              LDR      r0,|L8.464|
00017e  4284              CMP      r4,r0                 ;663
000180  d102              BNE      |L8.392|
000182  f04f0b18          MOV      r11,#0x18             ;664
000186  e010              B        |L8.426|
                  |L8.392|
000188  4813              LDR      r0,|L8.472|
00018a  4284              CMP      r4,r0                 ;665
00018c  d102              BNE      |L8.404|
00018e  f04f0b1a          MOV      r11,#0x1a             ;666
000192  e00a              B        |L8.426|
                  |L8.404|
000194  4818              LDR      r0,|L8.504|
000196  4284              CMP      r4,r0                 ;667
000198  d102              BNE      |L8.416|
00019a  f04f0b2b          MOV      r11,#0x2b             ;668
00019e  e004              B        |L8.426|
                  |L8.416|
0001a0  4815              LDR      r0,|L8.504|
0001a2  4284              CMP      r4,r0                 ;669
0001a4  d101              BNE      |L8.426|
0001a6  f04f0b2d          MOV      r11,#0x2d             ;670
                  |L8.426|
0001aa  f88db000          STRB     r11,[sp,#0]           ;672
0001ae  f88d9001          STRB     r9,[sp,#1]            ;673
0001b2  f88da002          STRB     r10,[sp,#2]           ;674
0001b6  2001              MOVS     r0,#1                 ;675
0001b8  f88d0003          STRB     r0,[sp,#3]            ;675
0001bc  4668              MOV      r0,sp                 ;676
0001be  f7fffffe          BL       NVIC_Init
0001c2  bf00              NOP      
0001c4  e745              B        |L8.82|
;;;679    
                          ENDP

0001c6  0000              DCW      0x0000
                  |L8.456|
                          DCD      0x40010000
                  |L8.460|
                          DCD      0x40010400
                  |L8.464|
                          DCD      0x40014000
                  |L8.468|
                          DCD      0x40014400
                  |L8.472|
                          DCD      0x40014800
                  |L8.476|
                          DCD      SystemCoreClock
                  |L8.480|
                          DCD      0x40000400
                  |L8.484|
                          DCD      0x40000800
                  |L8.488|
                          DCD      0x40000c00
                  |L8.492|
                          DCD      0x40001000
                  |L8.496|
                          DCD      0x40001400
                  |L8.500|
                          DCD      0x40001c00
                  |L8.504|
                          DCD      0x40001800

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_tim_pwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_tim_pwm_c_d7165983____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____REVSH|
#line 144
|__asm___13_bsp_tim_pwm_c_d7165983____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____RRX|
#line 300
|__asm___13_bsp_tim_pwm_c_d7165983____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
