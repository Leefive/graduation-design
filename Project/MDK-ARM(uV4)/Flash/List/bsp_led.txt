; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_led.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_led.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\USMART -I..\..\User\bsp_stm32f4xx\LCD -I..\..\User\bsp_stm32f4xx\phase_shift -I..\..\User\bsp_stm32f4xx\PWMInput -I..\..\User\bsp_stm32f4xx\ADC -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F427xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\bsp_led.crf ..\..\User\bsp_stm32f4xx\src\bsp_led.c]
                          THUMB

                          AREA ||i.bsp_InitLed||, CODE, READONLY, ALIGN=2

                  bsp_InitLed PROC
;;;83     */
;;;84     void bsp_InitLed(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;85     {
;;;86     	GPIO_InitTypeDef GPIO_InitStructure;
;;;87     
;;;88     	/* 打开GPIO时钟 */
;;;89     	RCC_AHB1PeriphClockCmd(RCC_ALL_LED, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;90     
;;;91     	/*
;;;92     		配置所有的LED指示灯GPIO为推挽输出模式
;;;93     		由于将GPIO设置为输出时，GPIO输出寄存器的值缺省是0，因此会驱动LED点亮.
;;;94     		这是我不希望的，因此在改变GPIO为输出前，先关闭LED指示灯
;;;95     	*/
;;;96     	bsp_LedOff(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_LedOff
;;;97     	bsp_LedOff(2);
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       bsp_LedOff
;;;98     	bsp_LedOff(3);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       bsp_LedOff
;;;99     	bsp_LedOff(4);
00001c  2004              MOVS     r0,#4
00001e  f7fffffe          BL       bsp_LedOff
;;;100    
;;;101    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
000022  2001              MOVS     r0,#1
000024  f88d0004          STRB     r0,[sp,#4]
;;;102    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000028  2000              MOVS     r0,#0
00002a  f88d0006          STRB     r0,[sp,#6]
;;;103    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
00002e  f88d0007          STRB     r0,[sp,#7]
;;;104    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
000032  2003              MOVS     r0,#3
000034  f88d0005          STRB     r0,[sp,#5]
;;;105    
;;;106    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED1;
000038  f44f5080          MOV      r0,#0x1000
00003c  9000              STR      r0,[sp,#0]
;;;107    	GPIO_Init(GPIO_PORT_LED1, &GPIO_InitStructure);
00003e  4669              MOV      r1,sp
000040  4805              LDR      r0,|L1.88|
000042  f7fffffe          BL       GPIO_Init
;;;108    
;;;109    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED2;
000046  f44f5000          MOV      r0,#0x2000
00004a  9000              STR      r0,[sp,#0]
;;;110    	GPIO_Init(GPIO_PORT_LED2, &GPIO_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4802              LDR      r0,|L1.88|
000050  f7fffffe          BL       GPIO_Init
;;;111    
;;;112    //	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED3;
;;;113    //	GPIO_Init(GPIO_PORT_LED3, &GPIO_InitStructure);
;;;114    
;;;115    //	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED4;
;;;116    //	GPIO_Init(GPIO_PORT_LED4, &GPIO_InitStructure);
;;;117    }
000054  bd1c              POP      {r2-r4,pc}
;;;118    
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      0x40020c00

                          AREA ||i.bsp_IsLedOn||, CODE, READONLY, ALIGN=2

                  bsp_IsLedOn PROC
;;;214    */
;;;215    uint8_t bsp_IsLedOn(uint8_t _no)
000000  4601              MOV      r1,r0
;;;216    {
;;;217    	if (_no == 1)
000002  2901              CMP      r1,#1
000004  d108              BNE      |L2.24|
;;;218    	{
;;;219    		if ((GPIO_PORT_LED1->ODR & GPIO_PIN_LED1) == 0)
000006  480b              LDR      r0,|L2.52|
000008  6800              LDR      r0,[r0,#0]
00000a  f4005080          AND      r0,r0,#0x1000
00000e  b908              CBNZ     r0,|L2.20|
;;;220    		{
;;;221    			return 1;
000010  2001              MOVS     r0,#1
                  |L2.18|
;;;222    		}
;;;223    		return 0;
;;;224    	}
;;;225    	else if (_no == 2)
;;;226    	{
;;;227    		if ((GPIO_PORT_LED2->ODR & GPIO_PIN_LED2) == 0)
;;;228    		{
;;;229    			return 1;
;;;230    		}
;;;231    		return 0;
;;;232    	}
;;;233    //	else if (_no == 3)
;;;234    //	{
;;;235    //		if ((GPIO_PORT_LED3->ODR & GPIO_PIN_LED3) == 0)
;;;236    //		{
;;;237    //			return 1;
;;;238    //		}
;;;239    //		return 0;
;;;240    //	}
;;;241    //	else if (_no == 4)
;;;242    //	{
;;;243    //		if ((GPIO_PORT_LED4->ODR & GPIO_PIN_LED4) == 0)
;;;244    //		{
;;;245    //			return 1;
;;;246    //		}
;;;247    //		return 0;
;;;248    //	}
;;;249    
;;;250    	return 0;
;;;251    }
000012  4770              BX       lr
                  |L2.20|
000014  2000              MOVS     r0,#0                 ;223
000016  e7fc              B        |L2.18|
                  |L2.24|
000018  2902              CMP      r1,#2                 ;225
00001a  d108              BNE      |L2.46|
00001c  4805              LDR      r0,|L2.52|
00001e  6800              LDR      r0,[r0,#0]            ;227
000020  f4005000          AND      r0,r0,#0x2000         ;227
000024  b908              CBNZ     r0,|L2.42|
000026  2001              MOVS     r0,#1                 ;229
000028  e7f3              B        |L2.18|
                  |L2.42|
00002a  2000              MOVS     r0,#0                 ;231
00002c  e7f1              B        |L2.18|
                  |L2.46|
00002e  2000              MOVS     r0,#0                 ;250
000030  e7ef              B        |L2.18|
;;;252    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x40020c14

                          AREA ||i.bsp_LedOff||, CODE, READONLY, ALIGN=2

                  bsp_LedOff PROC
;;;156    */
;;;157    void bsp_LedOff(uint8_t _no)  //BSRRL 为 置位操作 BSRRH为复位操作
000000  1e41              SUBS     r1,r0,#1
;;;158    {
;;;159    	_no--;
000002  b2c8              UXTB     r0,r1
;;;160    
;;;161    	if (_no == 0)
000004  b920              CBNZ     r0,|L3.16|
;;;162    	{
;;;163    		GPIO_PORT_LED1->BSRRL = GPIO_PIN_LED1;  //PD12 置位 LED1 关
000006  f44f5180          MOV      r1,#0x1000
00000a  4a05              LDR      r2,|L3.32|
00000c  8011              STRH     r1,[r2,#0]
00000e  e005              B        |L3.28|
                  |L3.16|
;;;164    	}
;;;165    	else if (_no == 1)
000010  2801              CMP      r0,#1
000012  d103              BNE      |L3.28|
;;;166    	{
;;;167    		GPIO_PORT_LED2->BSRRH = GPIO_PIN_LED2;  //PD13 复位 LED2才关
000014  0341              LSLS     r1,r0,#13
000016  4a02              LDR      r2,|L3.32|
000018  1c92              ADDS     r2,r2,#2
00001a  8011              STRH     r1,[r2,#0]
                  |L3.28|
;;;168    	}
;;;169    //	else if (_no == 2)
;;;170    //	{
;;;171    //		GPIO_PORT_LED3->BSRRL = GPIO_PIN_LED3;
;;;172    //	}
;;;173    //	else if (_no == 3)
;;;174    //	{
;;;175    //		GPIO_PORT_LED4->BSRRL = GPIO_PIN_LED4;
;;;176    //	}
;;;177    }
00001c  4770              BX       lr
;;;178    
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x40020c18

                          AREA ||i.bsp_LedOn||, CODE, READONLY, ALIGN=2

                  bsp_LedOn PROC
;;;126    */
;;;127    void bsp_LedOn(uint8_t _no)    //BSRRL 为 置位操作 BSRRH为复位操作
000000  1e41              SUBS     r1,r0,#1
;;;128    {
;;;129    	_no--;
000002  b2c8              UXTB     r0,r1
;;;130    
;;;131    	if (_no == 0)
000004  b920              CBNZ     r0,|L4.16|
;;;132    	{
;;;133    		GPIO_PORT_LED1->BSRRH = GPIO_PIN_LED1;
000006  f44f5180          MOV      r1,#0x1000
00000a  4a05              LDR      r2,|L4.32|
00000c  8011              STRH     r1,[r2,#0]
00000e  e005              B        |L4.28|
                  |L4.16|
;;;134    	}
;;;135    	else if (_no == 1)
000010  2801              CMP      r0,#1
000012  d103              BNE      |L4.28|
;;;136    	{
;;;137    		GPIO_PORT_LED2->BSRRL = GPIO_PIN_LED2;  //PD13 置位 LED2才亮
000014  0341              LSLS     r1,r0,#13
000016  4a02              LDR      r2,|L4.32|
000018  1e92              SUBS     r2,r2,#2
00001a  8011              STRH     r1,[r2,#0]
                  |L4.28|
;;;138    	}
;;;139    //	else if (_no == 2)
;;;140    //	{
;;;141    //		GPIO_PORT_LED3->BSRRH = GPIO_PIN_LED3;
;;;142    //	}
;;;143    //	else if (_no == 3)
;;;144    //	{
;;;145    //		GPIO_PORT_LED4->BSRRH = GPIO_PIN_LED4;
;;;146    //	}
;;;147    }
00001c  4770              BX       lr
;;;148    
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      0x40020c1a

                          AREA ||i.bsp_LedToggle||, CODE, READONLY, ALIGN=2

                  bsp_LedToggle PROC
;;;186    */
;;;187    void bsp_LedToggle(uint8_t _no)
000000  2801              CMP      r0,#1
;;;188    {
;;;189    	if (_no == 1)
000002  d106              BNE      |L5.18|
;;;190    	{
;;;191    		GPIO_PORT_LED1->ODR ^= GPIO_PIN_LED1;
000004  4907              LDR      r1,|L5.36|
000006  6809              LDR      r1,[r1,#0]
000008  f4815180          EOR      r1,r1,#0x1000
00000c  4a05              LDR      r2,|L5.36|
00000e  6011              STR      r1,[r2,#0]
000010  e007              B        |L5.34|
                  |L5.18|
;;;192    	}
;;;193    	else if (_no == 2)
000012  2802              CMP      r0,#2
000014  d105              BNE      |L5.34|
;;;194    	{
;;;195    		GPIO_PORT_LED2->ODR ^= GPIO_PIN_LED2;
000016  4903              LDR      r1,|L5.36|
000018  6809              LDR      r1,[r1,#0]
00001a  f4815100          EOR      r1,r1,#0x2000
00001e  4a01              LDR      r2,|L5.36|
000020  6011              STR      r1,[r2,#0]
                  |L5.34|
;;;196    	}
;;;197    //	else if (_no == 3)
;;;198    //	{
;;;199    //		GPIO_PORT_LED3->ODR ^= GPIO_PIN_LED3;
;;;200    //	}
;;;201    //	else if (_no == 4)
;;;202    //	{
;;;203    //		GPIO_PORT_LED4->ODR ^= GPIO_PIN_LED4;
;;;204    //	}
;;;205    }
000022  4770              BX       lr
;;;206    
                          ENDP

                  |L5.36|
                          DCD      0x40020c14

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_led.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_led_c_ba23b041____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REVSH|
#line 144
|__asm___9_bsp_led_c_ba23b041____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____RRX|
#line 300
|__asm___9_bsp_led_c_ba23b041____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
