; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_timer.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\USMART -I..\..\User\bsp_stm32f4xx\LCD -I..\..\User\bsp_stm32f4xx\phase_shift -I..\..\User\bsp_stm32f4xx\PWMInput -I..\..\User\bsp_stm32f4xx\ADC -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F427xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\bsp_timer.crf ..\..\User\bsp_stm32f4xx\src\bsp_timer.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;395    */
;;;396    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;397    {
;;;398    	SysTick_ISR();
000002  f7fffffe          BL       SysTick_ISR
;;;399    }
000006  bd10              POP      {r4,pc}
;;;400    
                          ENDP


                          AREA ||i.SysTick_ISR||, CODE, READONLY, ALIGN=2

                  SysTick_ISR PROC
;;;104    extern void bsp_RunPer10ms(void);
;;;105    void SysTick_ISR(void)
000000  b510              PUSH     {r4,lr}
;;;106    {
;;;107    	static uint8_t s_count = 0;
;;;108    	uint8_t i;
;;;109    
;;;110    	/* 每隔1ms进来1次 （仅用于 bsp_DelayMS） */
;;;111    	if (s_uiDelayCount > 0)
000002  481b              LDR      r0,|L2.112|
000004  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
000006  b140              CBZ      r0,|L2.26|
;;;112    	{
;;;113    		if (--s_uiDelayCount == 0)
000008  4819              LDR      r0,|L2.112|
00000a  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
00000c  1e40              SUBS     r0,r0,#1
00000e  4918              LDR      r1,|L2.112|
000010  6008              STR      r0,[r1,#0]  ; s_uiDelayCount
000012  b910              CBNZ     r0,|L2.26|
;;;114    		{
;;;115    			s_ucTimeOutFlag = 1;
000014  2001              MOVS     r0,#1
000016  4917              LDR      r1,|L2.116|
000018  7008              STRB     r0,[r1,#0]
                  |L2.26|
;;;116    		}
;;;117    	}
;;;118    
;;;119    	/* 每隔1ms，对软件定时器的计数器进行减一操作 */
;;;120    	for (i = 0; i < TMR_COUNT; i++)
00001a  2400              MOVS     r4,#0
00001c  e008              B        |L2.48|
                  |L2.30|
;;;121    	{
;;;122    		bsp_SoftTimerDec(&s_tTmr[i]);
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a15              LDR      r2,|L2.120|
000024  eb020081          ADD      r0,r2,r1,LSL #2
000028  f7fffffe          BL       bsp_SoftTimerDec
00002c  1c60              ADDS     r0,r4,#1              ;120
00002e  b2c4              UXTB     r4,r0                 ;120
                  |L2.48|
000030  2c04              CMP      r4,#4                 ;120
000032  dbf4              BLT      |L2.30|
;;;123    	}
;;;124    
;;;125    	/* 全局运行时间每1ms增1 */
;;;126    	g_iRunTime++;
000034  4811              LDR      r0,|L2.124|
000036  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000038  1c40              ADDS     r0,r0,#1
00003a  4910              LDR      r1,|L2.124|
00003c  6008              STR      r0,[r1,#0]  ; g_iRunTime
;;;127    	if (g_iRunTime == 0x7FFFFFFF)	/* 这个变量是 int32_t 类型，最大数为 0x7FFFFFFF */
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000042  f06f4100          MVN      r1,#0x80000000
000046  4288              CMP      r0,r1
000048  d102              BNE      |L2.80|
;;;128    	{
;;;129    		g_iRunTime = 0;
00004a  2000              MOVS     r0,#0
00004c  490b              LDR      r1,|L2.124|
00004e  6008              STR      r0,[r1,#0]  ; g_iRunTime
                  |L2.80|
;;;130    	}
;;;131    
;;;132    	bsp_RunPer1ms();		/* 每隔1ms调用一次此函数，此函数在 bsp.c */
000050  f7fffffe          BL       bsp_RunPer1ms
;;;133    
;;;134    	if (++s_count >= 10)
000054  480a              LDR      r0,|L2.128|
000056  7800              LDRB     r0,[r0,#0]  ; s_count
000058  1c40              ADDS     r0,r0,#1
00005a  b2c0              UXTB     r0,r0
00005c  4908              LDR      r1,|L2.128|
00005e  7008              STRB     r0,[r1,#0]
000060  280a              CMP      r0,#0xa
000062  db03              BLT      |L2.108|
;;;135    	{
;;;136    		s_count = 0;
000064  2000              MOVS     r0,#0
000066  7008              STRB     r0,[r1,#0]
;;;137    
;;;138    		bsp_RunPer10ms();	/* 每隔10ms调用一次此函数，此函数在 bsp.c */
000068  f7fffffe          BL       bsp_RunPer10ms
                  |L2.108|
;;;139    	}
;;;140    }
00006c  bd10              POP      {r4,pc}
;;;141    
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      s_uiDelayCount
                  |L2.116|
                          DCD      s_ucTimeOutFlag
                  |L2.120|
                          DCD      s_tTmr
                  |L2.124|
                          DCD      g_iRunTime
                  |L2.128|
                          DCD      s_count

                          AREA ||i.TIM5_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM5_IRQHandler PROC
;;;547    //void TIM4_IRQHandler(void)
;;;548    void TIM5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;549    {
;;;550        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC1))
000002  2102              MOVS     r1,#2
000004  4821              LDR      r0,|L3.140|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b158              CBZ      r0,|L3.36|
;;;551        {
;;;552            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00000c  2102              MOVS     r1,#2
00000e  481f              LDR      r0,|L3.140|
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;553            TIM_ITConfig(TIM_HARD, TIM_IT_CC1, DISABLE);	/* 禁能CC1中断 */
000014  2200              MOVS     r2,#0
000016  2102              MOVS     r1,#2
000018  481c              LDR      r0,|L3.140|
00001a  f7fffffe          BL       TIM_ITConfig
;;;554    
;;;555            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;556            s_TIM_CallBack1();
00001e  481c              LDR      r0,|L3.144|
000020  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack1
000022  4780              BLX      r0
                  |L3.36|
;;;557        }
;;;558    
;;;559        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC2))
000024  2104              MOVS     r1,#4
000026  4819              LDR      r0,|L3.140|
000028  f7fffffe          BL       TIM_GetITStatus
00002c  b158              CBZ      r0,|L3.70|
;;;560        {
;;;561            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
00002e  2104              MOVS     r1,#4
000030  4816              LDR      r0,|L3.140|
000032  f7fffffe          BL       TIM_ClearITPendingBit
;;;562            TIM_ITConfig(TIM_HARD, TIM_IT_CC2, DISABLE);	/* 禁能CC2中断 */
000036  2200              MOVS     r2,#0
000038  2104              MOVS     r1,#4
00003a  4814              LDR      r0,|L3.140|
00003c  f7fffffe          BL       TIM_ITConfig
;;;563    
;;;564            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;565            s_TIM_CallBack2();
000040  4814              LDR      r0,|L3.148|
000042  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack2
000044  4780              BLX      r0
                  |L3.70|
;;;566        }
;;;567    
;;;568        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC3))
000046  2108              MOVS     r1,#8
000048  4810              LDR      r0,|L3.140|
00004a  f7fffffe          BL       TIM_GetITStatus
00004e  b158              CBZ      r0,|L3.104|
;;;569        {
;;;570            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000050  2108              MOVS     r1,#8
000052  480e              LDR      r0,|L3.140|
000054  f7fffffe          BL       TIM_ClearITPendingBit
;;;571            TIM_ITConfig(TIM_HARD, TIM_IT_CC3, DISABLE);	/* 禁能CC3中断 */
000058  2200              MOVS     r2,#0
00005a  2108              MOVS     r1,#8
00005c  480b              LDR      r0,|L3.140|
00005e  f7fffffe          BL       TIM_ITConfig
;;;572    
;;;573            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;574            s_TIM_CallBack3();
000062  480d              LDR      r0,|L3.152|
000064  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack3
000066  4780              BLX      r0
                  |L3.104|
;;;575        }
;;;576    
;;;577        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC4))
000068  2110              MOVS     r1,#0x10
00006a  4808              LDR      r0,|L3.140|
00006c  f7fffffe          BL       TIM_GetITStatus
000070  b158              CBZ      r0,|L3.138|
;;;578        {
;;;579            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000072  2110              MOVS     r1,#0x10
000074  4805              LDR      r0,|L3.140|
000076  f7fffffe          BL       TIM_ClearITPendingBit
;;;580            TIM_ITConfig(TIM_HARD, TIM_IT_CC4, DISABLE);	/* 禁能CC4中断 */
00007a  2200              MOVS     r2,#0
00007c  2110              MOVS     r1,#0x10
00007e  4803              LDR      r0,|L3.140|
000080  f7fffffe          BL       TIM_ITConfig
;;;581    
;;;582            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;583            s_TIM_CallBack4();
000084  4805              LDR      r0,|L3.156|
000086  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack4
000088  4780              BLX      r0
                  |L3.138|
;;;584        }
;;;585    }
00008a  bd10              POP      {r4,pc}
;;;586    
                          ENDP

                  |L3.140|
                          DCD      0x40000c00
                  |L3.144|
                          DCD      s_TIM_CallBack1
                  |L3.148|
                          DCD      s_TIM_CallBack2
                  |L3.152|
                          DCD      s_TIM_CallBack3
                  |L3.156|
                          DCD      s_TIM_CallBack4

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;193     */
;;;194    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;195    {
;;;196      register uint32_t __regPriMask         __ASM("primask");
;;;197      __regPriMask = (priMask);
;;;198    }
000004  4770              BX       lr
;;;199    
                          ENDP


                          AREA ||i.bsp_CheckTimer||, CODE, READONLY, ALIGN=2

                  bsp_CheckTimer PROC
;;;348    */
;;;349    uint8_t bsp_CheckTimer(uint8_t _id)
000000  4601              MOV      r1,r0
;;;350    {
;;;351    	if (_id >= TMR_COUNT)
000002  2904              CMP      r1,#4
000004  db01              BLT      |L5.10|
;;;352    	{
;;;353    		return 0;
000006  2000              MOVS     r0,#0
                  |L5.8|
;;;354    	}
;;;355    
;;;356    	if (s_tTmr[_id].Flag == 1)
;;;357    	{
;;;358    		s_tTmr[_id].Flag = 0;
;;;359    		return 1;
;;;360    	}
;;;361    	else
;;;362    	{
;;;363    		return 0;
;;;364    	}
;;;365    }
000008  4770              BX       lr
                  |L5.10|
00000a  eb010041          ADD      r0,r1,r1,LSL #1       ;356
00000e  4a08              LDR      r2,|L5.48|
000010  eb020080          ADD      r0,r2,r0,LSL #2       ;356
000014  7840              LDRB     r0,[r0,#1]            ;356
000016  2801              CMP      r0,#1                 ;356
000018  d108              BNE      |L5.44|
00001a  2000              MOVS     r0,#0                 ;358
00001c  eb010241          ADD      r2,r1,r1,LSL #1       ;358
000020  4b03              LDR      r3,|L5.48|
000022  eb030282          ADD      r2,r3,r2,LSL #2       ;358
000026  7050              STRB     r0,[r2,#1]            ;358
000028  2001              MOVS     r0,#1                 ;359
00002a  e7ed              B        |L5.8|
                  |L5.44|
00002c  2000              MOVS     r0,#0                 ;363
00002e  e7eb              B        |L5.8|
;;;366    
                          ENDP

                  |L5.48|
                          DCD      s_tTmr

                          AREA ||i.bsp_DelayMS||, CODE, READONLY, ALIGN=2

                  bsp_DelayMS PROC
;;;175    */
;;;176    void bsp_DelayMS(uint32_t n)
000000  b510              PUSH     {r4,lr}
;;;177    {
000002  4604              MOV      r4,r0
;;;178    	if (n == 0)
000004  b904              CBNZ     r4,|L6.8|
                  |L6.6|
;;;179    	{
;;;180    		return;
;;;181    	}
;;;182    	else if (n == 1)
;;;183    	{
;;;184    		n = 2;
;;;185    	}
;;;186    
;;;187    	DISABLE_INT();  			/* 关中断 */
;;;188    
;;;189    	s_uiDelayCount = n;
;;;190    	s_ucTimeOutFlag = 0;
;;;191    
;;;192    	ENABLE_INT();  				/* 开中断 */
;;;193    
;;;194    	while (1)
;;;195    	{
;;;196    		bsp_Idle();				/* CPU空闲执行的操作， 见 bsp.c 和 bsp.h 文件 */
;;;197    
;;;198    		/*
;;;199    			等待延迟时间到
;;;200    			注意：编译器认为 s_ucTimeOutFlag = 0，所以可能优化错误，因此 s_ucTimeOutFlag 变量必须申明为 volatile
;;;201    		*/
;;;202    		if (s_ucTimeOutFlag == 1)
;;;203    		{
;;;204    			break;
;;;205    		}
;;;206    	}
;;;207    }
000006  bd10              POP      {r4,pc}
                  |L6.8|
000008  2c01              CMP      r4,#1                 ;182
00000a  d100              BNE      |L6.14|
00000c  2402              MOVS     r4,#2                 ;184
                  |L6.14|
00000e  2001              MOVS     r0,#1                 ;187
000010  f7fffffe          BL       __set_PRIMASK
000014  4809              LDR      r0,|L6.60|
000016  6004              STR      r4,[r0,#0]            ;189  ; s_uiDelayCount
000018  2000              MOVS     r0,#0                 ;190
00001a  4909              LDR      r1,|L6.64|
00001c  7008              STRB     r0,[r1,#0]            ;190
00001e  f7fffffe          BL       __set_PRIMASK
000022  e006              B        |L6.50|
                  |L6.36|
000024  f7fffffe          BL       bsp_Idle
000028  4805              LDR      r0,|L6.64|
00002a  7800              LDRB     r0,[r0,#0]            ;202  ; s_ucTimeOutFlag
00002c  2801              CMP      r0,#1                 ;202
00002e  d100              BNE      |L6.50|
000030  e000              B        |L6.52|
                  |L6.50|
000032  e7f7              B        |L6.36|
                  |L6.52|
000034  bf00              NOP                            ;204
000036  bf00              NOP      
000038  e7e5              B        |L6.6|
;;;208    
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      s_uiDelayCount
                  |L6.64|
                          DCD      s_ucTimeOutFlag

                          AREA ||i.bsp_DelayUS||, CODE, READONLY, ALIGN=2

                  bsp_DelayUS PROC
;;;216    */
;;;217    void bsp_DelayUS(uint32_t n)
000000  b5f0              PUSH     {r4-r7,lr}
;;;218    {
000002  4603              MOV      r3,r0
;;;219        uint32_t ticks;
;;;220        uint32_t told;
;;;221        uint32_t tnow;
;;;222        uint32_t tcnt = 0;
000004  2200              MOVS     r2,#0
;;;223        uint32_t reload;
;;;224    
;;;225    	reload = SysTick->LOAD;
000006  f04f26e0          MOV      r6,#0xe000e000
00000a  6975              LDR      r5,[r6,#0x14]
;;;226        ticks = n * (SystemCoreClock / 1000000);	 /* 需要的节拍数 */
00000c  4e0f              LDR      r6,|L7.76|
00000e  6836              LDR      r6,[r6,#0]  ; SystemCoreClock
000010  4f0f              LDR      r7,|L7.80|
000012  fbb6f6f7          UDIV     r6,r6,r7
000016  fb06f403          MUL      r4,r6,r3
;;;227    
;;;228        tcnt = 0;
00001a  bf00              NOP      
;;;229        told = SysTick->VAL;             /* 刚进入时的计数器值 */
00001c  f04f26e0          MOV      r6,#0xe000e000
000020  69b1              LDR      r1,[r6,#0x18]
;;;230    
;;;231        while (1)
000022  e010              B        |L7.70|
                  |L7.36|
;;;232        {
;;;233            tnow = SysTick->VAL;
000024  f04f26e0          MOV      r6,#0xe000e000
000028  69b0              LDR      r0,[r6,#0x18]
;;;234            if (tnow != told)
00002a  4288              CMP      r0,r1
00002c  d00b              BEQ      |L7.70|
;;;235            {
;;;236                /* SYSTICK是一个递减的计数器 */
;;;237                if (tnow < told)
00002e  4288              CMP      r0,r1
000030  d202              BCS      |L7.56|
;;;238                {
;;;239                    tcnt += told - tnow;
000032  1a0e              SUBS     r6,r1,r0
000034  4432              ADD      r2,r2,r6
000036  e002              B        |L7.62|
                  |L7.56|
;;;240                }
;;;241                /* 重新装载递减 */
;;;242                else
;;;243                {
;;;244                    tcnt += reload - tnow + told;
000038  1a2e              SUBS     r6,r5,r0
00003a  440e              ADD      r6,r6,r1
00003c  4432              ADD      r2,r2,r6
                  |L7.62|
;;;245                }
;;;246                told = tnow;
00003e  4601              MOV      r1,r0
;;;247    
;;;248                /* 时间超过/等于要延迟的时间,则退出 */
;;;249                if (tcnt >= ticks)
000040  42a2              CMP      r2,r4
000042  d300              BCC      |L7.70|
;;;250                {
;;;251                	break;
000044  e000              B        |L7.72|
                  |L7.70|
000046  e7ed              B        |L7.36|
                  |L7.72|
000048  bf00              NOP      
;;;252                }
;;;253            }
;;;254        }
;;;255    }
00004a  bdf0              POP      {r4-r7,pc}
;;;256    
                          ENDP

                  |L7.76|
                          DCD      SystemCoreClock
                  |L7.80|
                          DCD      0x000f4240

                          AREA ||i.bsp_GetRunTime||, CODE, READONLY, ALIGN=2

                  bsp_GetRunTime PROC
;;;374    */
;;;375    int32_t bsp_GetRunTime(void)
000000  b510              PUSH     {r4,lr}
;;;376    {
;;;377    	int32_t runtime;
;;;378    
;;;379    	DISABLE_INT();  	/* 关中断 */
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       __set_PRIMASK
;;;380    
;;;381    	runtime = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
000008  4803              LDR      r0,|L8.24|
00000a  6804              LDR      r4,[r0,#0]  ; g_iRunTime
;;;382    
;;;383    	ENABLE_INT();  		/* 开中断 */
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       __set_PRIMASK
;;;384    
;;;385    	return runtime;
000012  4620              MOV      r0,r4
;;;386    }
000014  bd10              POP      {r4,pc}
;;;387    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      g_iRunTime

                          AREA ||i.bsp_InitHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitHardTimer PROC
;;;409    */
;;;410    void bsp_InitHardTimer(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;411    {
;;;412    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;413    	uint16_t usPeriod;
;;;414    	uint16_t usPrescaler;
;;;415    	uint32_t uiTIMxCLK;
;;;416    
;;;417      	/* 使能TIM时钟 */
;;;418    	RCC_APB1PeriphClockCmd(TIM_HARD_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;419    
;;;420        /*-----------------------------------------------------------------------
;;;421    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;422    
;;;423    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;424    		PCLK2 = HCLK / 2      (APB2Periph)
;;;425    		PCLK1 = HCLK / 4      (APB1Periph)
;;;426    
;;;427    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;428    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;429    
;;;430    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;431    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;432    
;;;433    	----------------------------------------------------------------------- */
;;;434    	uiTIMxCLK = SystemCoreClock / 2;
00000a  4814              LDR      r0,|L9.92|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  0846              LSRS     r6,r0,#1
;;;435    
;;;436    	usPrescaler = uiTIMxCLK / 1000000 ;	/* 分频到周期 1us */
000010  4813              LDR      r0,|L9.96|
000012  fbb6f0f0          UDIV     r0,r6,r0
000016  b285              UXTH     r5,r0
;;;437    	usPeriod = 0xFFFF;
000018  f64f74ff          MOV      r4,#0xffff
;;;438    
;;;439    	/* Time base configuration */
;;;440    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
00001c  9402              STR      r4,[sp,#8]
;;;441    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
00001e  f8ad5004          STRH     r5,[sp,#4]
;;;442    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
000022  2000              MOVS     r0,#0
000024  f8ad000c          STRH     r0,[sp,#0xc]
;;;443    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000028  f8ad0006          STRH     r0,[sp,#6]
;;;444    
;;;445    	TIM_TimeBaseInit(TIM_HARD, &TIM_TimeBaseStructure);
00002c  a901              ADD      r1,sp,#4
00002e  480d              LDR      r0,|L9.100|
000030  f7fffffe          BL       TIM_TimeBaseInit
;;;446    
;;;447    	//TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;448    
;;;449    	/* TIMx enable counter */
;;;450    	TIM_Cmd(TIM_HARD, ENABLE);
000034  2101              MOVS     r1,#1
000036  480b              LDR      r0,|L9.100|
000038  f7fffffe          BL       TIM_Cmd
;;;451    
;;;452    	/* 配置TIM定时中断 (Update) */
;;;453    	{
;;;454    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;455    
;;;456    		NVIC_InitStructure.NVIC_IRQChannel = TIM_HARD_IRQn;
00003c  2032              MOVS     r0,#0x32
00003e  f88d0000          STRB     r0,[sp,#0]
;;;457    
;;;458    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;	/* 比串口优先级低 */
000042  2003              MOVS     r0,#3
000044  f88d0001          STRB     r0,[sp,#1]
;;;459    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000048  2000              MOVS     r0,#0
00004a  f88d0002          STRB     r0,[sp,#2]
;;;460    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00004e  2001              MOVS     r0,#1
000050  f88d0003          STRB     r0,[sp,#3]
;;;461    		NVIC_Init(&NVIC_InitStructure);
000054  4668              MOV      r0,sp
000056  f7fffffe          BL       NVIC_Init
;;;462    	}
;;;463    }
00005a  bd7f              POP      {r0-r6,pc}
;;;464    
                          ENDP

                  |L9.92|
                          DCD      SystemCoreClock
                  |L9.96|
                          DCD      0x000f4240
                  |L9.100|
                          DCD      0x40000c00

                          AREA ||i.bsp_InitTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitTimer PROC
;;;64     */
;;;65     void bsp_InitTimer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;66     {
;;;67     	uint8_t i;
;;;68     
;;;69     	/* 清零所有的软件定时器 */
;;;70     	for (i = 0; i < TMR_COUNT; i++)
000002  2400              MOVS     r4,#0
000004  e016              B        |L10.52|
                  |L10.6|
;;;71     	{
;;;72     		s_tTmr[i].Count = 0;
000006  2000              MOVS     r0,#0
000008  eb040144          ADD      r1,r4,r4,LSL #1
00000c  4a1f              LDR      r2,|L10.140|
00000e  eb020181          ADD      r1,r2,r1,LSL #2
000012  6048              STR      r0,[r1,#4]
;;;73     		s_tTmr[i].PreLoad = 0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
000018  eb020181          ADD      r1,r2,r1,LSL #2
00001c  6088              STR      r0,[r1,#8]
;;;74     		s_tTmr[i].Flag = 0;
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  eb020181          ADD      r1,r2,r1,LSL #2
000026  7048              STRB     r0,[r1,#1]
;;;75     		s_tTmr[i].Mode = TMR_ONCE_MODE;	/* 缺省是1次性工作模式 */
000028  eb040144          ADD      r1,r4,r4,LSL #1
00002c  f8020021          STRB     r0,[r2,r1,LSL #2]
000030  1c60              ADDS     r0,r4,#1              ;70
000032  b2c4              UXTB     r4,r0                 ;70
                  |L10.52|
000034  2c04              CMP      r4,#4                 ;70
000036  dbe6              BLT      |L10.6|
;;;76     	}
;;;77     
;;;78     	/*
;;;79     		配置systic中断周期为1ms，并启动systick中断。
;;;80     
;;;81         	SystemCoreClock 是固件中定义的系统内核时钟，对于STM32F4XX,一般为 168MHz
;;;82     
;;;83         	SysTick_Config() 函数的形参表示内核时钟多少个周期后触发一次Systick定时中断.
;;;84     	    	-- SystemCoreClock / 1000  表示定时频率为 1000Hz， 也就是定时周期为  1ms
;;;85     	    	-- SystemCoreClock / 500   表示定时频率为 500Hz，  也就是定时周期为  2ms
;;;86     	    	-- SystemCoreClock / 2000  表示定时频率为 2000Hz， 也就是定时周期为  500us
;;;87     
;;;88         	对于常规的应用，我们一般取定时周期1ms。对于低速CPU或者低功耗应用，可以设置定时周期为 10ms
;;;89         */
;;;90     	SysTick_Config(SystemCoreClock / 1000);
000038  4815              LDR      r0,|L10.144|
00003a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00003c  f44f727a          MOV      r2,#0x3e8
000040  fbb0f1f2          UDIV     r1,r0,r2
000044  1e48              SUBS     r0,r1,#1
000046  f1b07f80          CMP      r0,#0x1000000
00004a  d300              BCC      |L10.78|
00004c  e01b              B        |L10.134|
                  |L10.78|
00004e  1e48              SUBS     r0,r1,#1
000050  f04f22e0          MOV      r2,#0xe000e000
000054  6150              STR      r0,[r2,#0x14]
000056  1750              ASRS     r0,r2,#29
000058  220f              MOVS     r2,#0xf
00005a  2800              CMP      r0,#0
00005c  da07              BGE      |L10.110|
00005e  0713              LSLS     r3,r2,#28
000060  0e1e              LSRS     r6,r3,#24
000062  4b0c              LDR      r3,|L10.148|
000064  f000050f          AND      r5,r0,#0xf
000068  1f2d              SUBS     r5,r5,#4
00006a  555e              STRB     r6,[r3,r5]
00006c  e003              B        |L10.118|
                  |L10.110|
00006e  0713              LSLS     r3,r2,#28
000070  0e1d              LSRS     r5,r3,#24
000072  4b09              LDR      r3,|L10.152|
000074  541d              STRB     r5,[r3,r0]
                  |L10.118|
000076  bf00              NOP      
000078  2000              MOVS     r0,#0
00007a  f04f22e0          MOV      r2,#0xe000e000
00007e  6190              STR      r0,[r2,#0x18]
000080  2007              MOVS     r0,#7
000082  6110              STR      r0,[r2,#0x10]
000084  bf00              NOP      
                  |L10.134|
;;;91     
;;;92     	bsp_InitHardTimer();	/* 开启硬件定时中断 */
000086  f7fffffe          BL       bsp_InitHardTimer
;;;93     }
00008a  bd70              POP      {r4-r6,pc}
;;;94     
                          ENDP

                  |L10.140|
                          DCD      s_tTmr
                  |L10.144|
                          DCD      SystemCoreClock
                  |L10.148|
                          DCD      0xe000ed18
                  |L10.152|
                          DCD      0xe000e400

                          AREA ||i.bsp_SoftTimerDec||, CODE, READONLY, ALIGN=1

                  bsp_SoftTimerDec PROC
;;;149    */
;;;150    static void bsp_SoftTimerDec(SOFT_TMR *_tmr)
000000  6841              LDR      r1,[r0,#4]
;;;151    {
;;;152    	if (_tmr->Count > 0)
000002  b151              CBZ      r1,|L11.26|
;;;153    	{
;;;154    		/* 如果定时器变量减到1则设置定时器到达标志 */
;;;155    		if (--_tmr->Count == 0)
000004  6841              LDR      r1,[r0,#4]
000006  1e49              SUBS     r1,r1,#1
000008  6041              STR      r1,[r0,#4]
00000a  b931              CBNZ     r1,|L11.26|
;;;156    		{
;;;157    			_tmr->Flag = 1;
00000c  2101              MOVS     r1,#1
00000e  7041              STRB     r1,[r0,#1]
;;;158    
;;;159    			/* 如果是自动模式，则自动重装计数器 */
;;;160    			if(_tmr->Mode == TMR_AUTO_MODE)
000010  7801              LDRB     r1,[r0,#0]
000012  2901              CMP      r1,#1
000014  d101              BNE      |L11.26|
;;;161    			{
;;;162    				_tmr->Count = _tmr->PreLoad;
000016  6881              LDR      r1,[r0,#8]
000018  6041              STR      r1,[r0,#4]
                  |L11.26|
;;;163    			}
;;;164    		}
;;;165    	}
;;;166    }
00001a  4770              BX       lr
;;;167    
                          ENDP


                          AREA ||i.bsp_StartAutoTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartAutoTimer PROC
;;;294    */
;;;295    void bsp_StartAutoTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;296    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;297    	if (_id >= TMR_COUNT)
000006  2c04              CMP      r4,#4
000008  db06              BLT      |L12.24|
;;;298    	{
;;;299    		/* 打印出错的源代码文件名、函数名称 */
;;;300    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
00000a  4a12              LDR      r2,|L12.84|
00000c  a112              ADR      r1,|L12.88|
00000e  a01d              ADR      r0,|L12.132|
000010  f7fffffe          BL       __2printf
;;;301    		while(1); /* 参数异常，死机等待看门狗复位 */
000014  bf00              NOP      
                  |L12.22|
000016  e7fe              B        |L12.22|
                  |L12.24|
;;;302    	}
;;;303    
;;;304    	DISABLE_INT();  		/* 关中断 */
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       __set_PRIMASK
;;;305    
;;;306    	s_tTmr[_id].Count = _period;			/* 实时计数器初值 */
00001e  eb040044          ADD      r0,r4,r4,LSL #1
000022  4920              LDR      r1,|L12.164|
000024  eb010080          ADD      r0,r1,r0,LSL #2
000028  6045              STR      r5,[r0,#4]
;;;307    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
00002a  eb040044          ADD      r0,r4,r4,LSL #1
00002e  eb010080          ADD      r0,r1,r0,LSL #2
000032  6085              STR      r5,[r0,#8]
;;;308    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000034  2000              MOVS     r0,#0
000036  eb040144          ADD      r1,r4,r4,LSL #1
00003a  4a1a              LDR      r2,|L12.164|
00003c  eb020181          ADD      r1,r2,r1,LSL #2
000040  7048              STRB     r0,[r1,#1]
;;;309    	s_tTmr[_id].Mode = TMR_AUTO_MODE;	/* 自动工作模式 */
000042  2001              MOVS     r0,#1
000044  eb040144          ADD      r1,r4,r4,LSL #1
000048  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;310    
;;;311    	ENABLE_INT();  			/* 开中断 */
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       __set_PRIMASK
;;;312    }
000052  bd70              POP      {r4-r6,pc}
;;;313    
                          ENDP

                  |L12.84|
                          DCD      |symbol_number.50|
                  |L12.88|
000058  2e2e5c2e          DCB      "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c",0
00005c  2e5c5573
000060  65725c62
000064  73705f73
000068  746d3332
00006c  66347878
000070  5c737263
000074  5c627370
000078  5f74696d
00007c  65722e63
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L12.132|
000084  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000088  723a2066
00008c  696c6520
000090  25732c20
000094  66756e63
000098  74696f6e
00009c  20257328
0000a0  290d0a00
                  |L12.164|
                          DCD      s_tTmr

                          AREA ||i.bsp_StartHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartHardTimer PROC
;;;477    */
;;;478    void bsp_StartHardTimer(uint8_t _CC, uint32_t _uiTimeOut, void * _pCallBack)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;479    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;480        uint32_t cnt_now;
;;;481        uint32_t cnt_tar;
;;;482    
;;;483        /*
;;;484            执行下面这个语句，时长 = 18us (通过逻辑分析仪测量IO翻转)
;;;485            bsp_StartTimer2(3, 500, (void *)test1);
;;;486        */
;;;487        if (_uiTimeOut < 5)
00000a  2e05              CMP      r6,#5
00000c  d300              BCC      |L13.16|
;;;488        {
;;;489            ;
;;;490        }
;;;491        else
;;;492        {
;;;493            _uiTimeOut -= 5;
00000e  1f76              SUBS     r6,r6,#5
                  |L13.16|
;;;494        }
;;;495    
;;;496        cnt_now = TIM_GetCounter(TIM_HARD);    	/* 读取当前的计数器值 */
000010  4828              LDR      r0,|L13.180|
000012  f7fffffe          BL       TIM_GetCounter
000016  4607              MOV      r7,r0
;;;497        cnt_tar = cnt_now + _uiTimeOut;			/* 计算捕获的计数器值 */
000018  eb070806          ADD      r8,r7,r6
;;;498        if (_CC == 1)
00001c  2c01              CMP      r4,#1
00001e  d10f              BNE      |L13.64|
;;;499        {
;;;500            s_TIM_CallBack1 = (void (*)(void))_pCallBack;
000020  4825              LDR      r0,|L13.184|
000022  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack1
;;;501    
;;;502            TIM_SetCompare1(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC1 */
000024  4641              MOV      r1,r8
000026  4823              LDR      r0,|L13.180|
000028  f7fffffe          BL       TIM_SetCompare1
;;;503            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00002c  2102              MOVS     r1,#2
00002e  4821              LDR      r0,|L13.180|
000030  f7fffffe          BL       TIM_ClearITPendingBit
;;;504    		TIM_ITConfig(TIM_HARD, TIM_IT_CC1, ENABLE);	/* 使能CC1中断 */
000034  2201              MOVS     r2,#1
000036  2102              MOVS     r1,#2
000038  481e              LDR      r0,|L13.180|
00003a  f7fffffe          BL       TIM_ITConfig
00003e  e037              B        |L13.176|
                  |L13.64|
;;;505    
;;;506        }
;;;507        else if (_CC == 2)
000040  2c02              CMP      r4,#2
000042  d10f              BNE      |L13.100|
;;;508        {
;;;509    		s_TIM_CallBack2 = (void (*)(void))_pCallBack;
000044  481d              LDR      r0,|L13.188|
000046  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack2
;;;510    
;;;511            TIM_SetCompare2(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC2 */
000048  4641              MOV      r1,r8
00004a  481a              LDR      r0,|L13.180|
00004c  f7fffffe          BL       TIM_SetCompare2
;;;512    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
000050  2104              MOVS     r1,#4
000052  4818              LDR      r0,|L13.180|
000054  f7fffffe          BL       TIM_ClearITPendingBit
;;;513    		TIM_ITConfig(TIM_HARD, TIM_IT_CC2, ENABLE);	/* 使能CC2中断 */
000058  2201              MOVS     r2,#1
00005a  2104              MOVS     r1,#4
00005c  4815              LDR      r0,|L13.180|
00005e  f7fffffe          BL       TIM_ITConfig
000062  e025              B        |L13.176|
                  |L13.100|
;;;514        }
;;;515        else if (_CC == 3)
000064  2c03              CMP      r4,#3
000066  d10f              BNE      |L13.136|
;;;516        {
;;;517            s_TIM_CallBack3 = (void (*)(void))_pCallBack;
000068  4815              LDR      r0,|L13.192|
00006a  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack3
;;;518    
;;;519            TIM_SetCompare3(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC3 */
00006c  4641              MOV      r1,r8
00006e  4811              LDR      r0,|L13.180|
000070  f7fffffe          BL       TIM_SetCompare3
;;;520            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000074  2108              MOVS     r1,#8
000076  480f              LDR      r0,|L13.180|
000078  f7fffffe          BL       TIM_ClearITPendingBit
;;;521    		TIM_ITConfig(TIM_HARD, TIM_IT_CC3, ENABLE);	/* 使能CC3中断 */
00007c  2201              MOVS     r2,#1
00007e  2108              MOVS     r1,#8
000080  480c              LDR      r0,|L13.180|
000082  f7fffffe          BL       TIM_ITConfig
000086  e013              B        |L13.176|
                  |L13.136|
;;;522        }
;;;523        else if (_CC == 4)
000088  2c04              CMP      r4,#4
00008a  d10f              BNE      |L13.172|
;;;524        {
;;;525            s_TIM_CallBack4 = (void (*)(void))_pCallBack;
00008c  480d              LDR      r0,|L13.196|
00008e  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack4
;;;526    
;;;527            TIM_SetCompare4(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC4 */
000090  4641              MOV      r1,r8
000092  4808              LDR      r0,|L13.180|
000094  f7fffffe          BL       TIM_SetCompare4
;;;528    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000098  2110              MOVS     r1,#0x10
00009a  4806              LDR      r0,|L13.180|
00009c  f7fffffe          BL       TIM_ClearITPendingBit
;;;529    		TIM_ITConfig(TIM_HARD, TIM_IT_CC4, ENABLE);	/* 使能CC4中断 */
0000a0  2201              MOVS     r2,#1
0000a2  2110              MOVS     r1,#0x10
0000a4  4803              LDR      r0,|L13.180|
0000a6  f7fffffe          BL       TIM_ITConfig
0000aa  e001              B        |L13.176|
                  |L13.172|
;;;530        }
;;;531    	else
;;;532        {
;;;533            return;
;;;534        }
;;;535    }
0000ac  e8bd81f0          POP      {r4-r8,pc}
                  |L13.176|
0000b0  bf00              NOP      
0000b2  e7fb              B        |L13.172|
;;;536    
                          ENDP

                  |L13.180|
                          DCD      0x40000c00
                  |L13.184|
                          DCD      s_TIM_CallBack1
                  |L13.188|
                          DCD      s_TIM_CallBack2
                  |L13.192|
                          DCD      s_TIM_CallBack3
                  |L13.196|
                          DCD      s_TIM_CallBack4

                          AREA ||i.bsp_StartTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartTimer PROC
;;;266    */
;;;267    void bsp_StartTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;268    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;269    	if (_id >= TMR_COUNT)
000006  2c04              CMP      r4,#4
000008  db06              BLT      |L14.24|
;;;270    	{
;;;271    		/* 打印出错的源代码文件名、函数名称 */
;;;272    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
00000a  4a11              LDR      r2,|L14.80|
00000c  a111              ADR      r1,|L14.84|
00000e  a01c              ADR      r0,|L14.128|
000010  f7fffffe          BL       __2printf
;;;273    		while(1); /* 参数异常，死机等待看门狗复位 */
000014  bf00              NOP      
                  |L14.22|
000016  e7fe              B        |L14.22|
                  |L14.24|
;;;274    	}
;;;275    
;;;276    	DISABLE_INT();  			/* 关中断 */
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       __set_PRIMASK
;;;277    
;;;278    	s_tTmr[_id].Count = _period;		/* 实时计数器初值 */
00001e  eb040044          ADD      r0,r4,r4,LSL #1
000022  491f              LDR      r1,|L14.160|
000024  eb010080          ADD      r0,r1,r0,LSL #2
000028  6045              STR      r5,[r0,#4]
;;;279    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
00002a  eb040044          ADD      r0,r4,r4,LSL #1
00002e  eb010080          ADD      r0,r1,r0,LSL #2
000032  6085              STR      r5,[r0,#8]
;;;280    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000034  2000              MOVS     r0,#0
000036  eb040144          ADD      r1,r4,r4,LSL #1
00003a  4a19              LDR      r2,|L14.160|
00003c  eb020181          ADD      r1,r2,r1,LSL #2
000040  7048              STRB     r0,[r1,#1]
;;;281    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 1次性工作模式 */
000042  eb040144          ADD      r1,r4,r4,LSL #1
000046  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;282    
;;;283    	ENABLE_INT();  				/* 开中断 */
00004a  f7fffffe          BL       __set_PRIMASK
;;;284    }
00004e  bd70              POP      {r4-r6,pc}
;;;285    
                          ENDP

                  |L14.80|
                          DCD      __FUNCTION__
                  |L14.84|
000054  2e2e5c2e          DCB      "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c",0
000058  2e5c5573
00005c  65725c62
000060  73705f73
000064  746d3332
000068  66347878
00006c  5c737263
000070  5c627370
000074  5f74696d
000078  65722e63
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L14.128|
000080  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000084  723a2066
000088  696c6520
00008c  25732c20
000090  66756e63
000094  74696f6e
000098  20257328
00009c  290d0a00
                  |L14.160|
                          DCD      s_tTmr

                          AREA ||i.bsp_StopTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StopTimer PROC
;;;321    */
;;;322    void bsp_StopTimer(uint8_t _id)
000000  b510              PUSH     {r4,lr}
;;;323    {
000002  4604              MOV      r4,r0
;;;324    	if (_id >= TMR_COUNT)
000004  2c04              CMP      r4,#4
000006  db06              BLT      |L15.22|
;;;325    	{
;;;326    		/* 打印出错的源代码文件名、函数名称 */
;;;327    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
000008  4a0e              LDR      r2,|L15.68|
00000a  a10f              ADR      r1,|L15.72|
00000c  a019              ADR      r0,|L15.116|
00000e  f7fffffe          BL       __2printf
;;;328    		while(1); /* 参数异常，死机等待看门狗复位 */
000012  bf00              NOP      
                  |L15.20|
000014  e7fe              B        |L15.20|
                  |L15.22|
;;;329    	}
;;;330    
;;;331    	DISABLE_INT();  	/* 关中断 */
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       __set_PRIMASK
;;;332    
;;;333    	s_tTmr[_id].Count = 0;				/* 实时计数器初值 */
00001c  2000              MOVS     r0,#0
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a1c              LDR      r2,|L15.148|
000024  eb020181          ADD      r1,r2,r1,LSL #2
000028  6048              STR      r0,[r1,#4]
;;;334    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
00002a  eb040144          ADD      r1,r4,r4,LSL #1
00002e  eb020181          ADD      r1,r2,r1,LSL #2
000032  7048              STRB     r0,[r1,#1]
;;;335    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 自动工作模式 */
000034  eb040144          ADD      r1,r4,r4,LSL #1
000038  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;336    
;;;337    	ENABLE_INT();  		/* 开中断 */
00003c  f7fffffe          BL       __set_PRIMASK
;;;338    }
000040  bd10              POP      {r4,pc}
;;;339    
                          ENDP

000042  0000              DCW      0x0000
                  |L15.68|
                          DCD      |symbol_number.51|
                  |L15.72|
000048  2e2e5c2e          DCB      "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c",0
00004c  2e5c5573
000050  65725c62
000054  73705f73
000058  746d3332
00005c  66347878
000060  5c737263
000064  5c627370
000068  5f74696d
00006c  65722e63
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L15.116|
000074  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000078  723a2066
00007c  696c6520
000080  25732c20
000084  66756e63
000088  74696f6e
00008c  20257328
000090  290d0a00
                  |L15.148|
                          DCD      s_tTmr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tTmr
                          %        48

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6273705f          DCB      0x62,0x73,0x70,0x5f
000004  53746172          DCB      0x53,0x74,0x61,0x72
000008  7454696d          DCB      0x74,0x54,0x69,0x6d
00000c  657200            DCB      0x65,0x72,0x00
                  |symbol_number.50|
00000f  62                DCB      0x62
000010  73705f53          DCB      0x73,0x70,0x5f,0x53
000014  74617274          DCB      0x74,0x61,0x72,0x74
000018  4175746f          DCB      0x41,0x75,0x74,0x6f
00001c  54696d65          DCB      0x54,0x69,0x6d,0x65
000020  7200              DCB      0x72,0x00
                  |symbol_number.51|
000022  6273              DCB      0x62,0x73
000024  705f5374          DCB      0x70,0x5f,0x53,0x74
000028  6f705469          DCB      0x6f,0x70,0x54,0x69
00002c  6d657200          DCB      0x6d,0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  s_uiDelayCount
                          DCD      0x00000000
                  s_ucTimeOutFlag
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  g_iRunTime
                          DCD      0x00000000
                  s_TIM_CallBack1
                          DCD      0x00000000
                  s_TIM_CallBack2
                          DCD      0x00000000
                  s_TIM_CallBack3
                          DCD      0x00000000
                  s_TIM_CallBack4
                          DCD      0x00000000
                  s_count
00001c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_timer_c_95bb07ef____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REVSH|
#line 144
|__asm___11_bsp_timer_c_95bb07ef____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____RRX|
#line 300
|__asm___11_bsp_timer_c_95bb07ef____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
