; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_advanced_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_advanced_timer.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\USMART -I..\..\User\bsp_stm32f4xx\LCD -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F427xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_advanced_timer.crf ..\..\User\bsp_stm32f4xx\src\bsp_advanced_timer.c]
                          THUMB

                          AREA ||i.bsp_advanced_timer_init||, CODE, READONLY, ALIGN=2

                  bsp_advanced_timer_init PROC
;;;7      
;;;8      void bsp_advanced_timer_init(uint16_t _Frequency,uint16_t duty_cycle)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;9      {
000004  b08e              SUB      sp,sp,#0x38
000006  4606              MOV      r6,r0
000008  460c              MOV      r4,r1
;;;10     
;;;11     	
;;;12     	uint16_t TimerPeriod = 0;  //ARR值
00000a  2500              MOVS     r5,#0
;;;13     	uint16_t Channel1Pulse = 0, Channel2Pulse = 0;
00000c  2700              MOVS     r7,#0
00000e  46a8              MOV      r8,r5
;;;14     	
;;;15     	GPIO_InitTypeDef GPIO_InitStructure;
;;;16     	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;17     	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;18     	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
;;;19     	
;;;20     	
;;;21     	
;;;22     	  /* TIM1 clock enable */
;;;23         RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
000010  2101              MOVS     r1,#1
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;24     	
;;;25     	  /* GPIOA and GPIOB clocks enable */
;;;26     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB, ENABLE);
000018  2101              MOVS     r1,#1
00001a  2003              MOVS     r0,#3
00001c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;27     	
;;;28     	//配置TIM1 Channel_1(PA8) Channel_1N(PB13) Channel_2(PA9) Channel_2N(PB14) 
;;;29     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
000020  f44f7040          MOV      r0,#0x300
000024  900c              STR      r0,[sp,#0x30]
;;;30     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000026  2002              MOVS     r0,#2
000028  f88d0034          STRB     r0,[sp,#0x34]
;;;31     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00002c  2003              MOVS     r0,#3
00002e  f88d0035          STRB     r0,[sp,#0x35]
;;;32     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000032  2000              MOVS     r0,#0
000034  f88d0036          STRB     r0,[sp,#0x36]
;;;33     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000038  f88d0037          STRB     r0,[sp,#0x37]
;;;34     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00003c  a90c              ADD      r1,sp,#0x30
00003e  4848              LDR      r0,|L1.352|
000040  f7fffffe          BL       GPIO_Init
;;;35     	
;;;36         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
000044  f44f40c0          MOV      r0,#0x6000
000048  900c              STR      r0,[sp,#0x30]
;;;37     	GPIO_Init(GPIOB, &GPIO_InitStructure);	
00004a  a90c              ADD      r1,sp,#0x30
00004c  4845              LDR      r0,|L1.356|
00004e  f7fffffe          BL       GPIO_Init
;;;38     	
;;;39     	 /* Connect TIM pins to AF1 */
;;;40     	GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_TIM1);
000052  2201              MOVS     r2,#1
000054  2108              MOVS     r1,#8
000056  4842              LDR      r0,|L1.352|
000058  f7fffffe          BL       GPIO_PinAFConfig
;;;41     	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_TIM1);
00005c  2201              MOVS     r2,#1
00005e  2109              MOVS     r1,#9
000060  483f              LDR      r0,|L1.352|
000062  f7fffffe          BL       GPIO_PinAFConfig
;;;42     	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_TIM1);
000066  2201              MOVS     r2,#1
000068  210d              MOVS     r1,#0xd
00006a  483e              LDR      r0,|L1.356|
00006c  f7fffffe          BL       GPIO_PinAFConfig
;;;43     	GPIO_PinAFConfig(GPIOB, GPIO_PinSource14, GPIO_AF_TIM1);
000070  2201              MOVS     r2,#1
000072  210e              MOVS     r1,#0xe
000074  483b              LDR      r0,|L1.356|
000076  f7fffffe          BL       GPIO_PinAFConfig
;;;44     	
;;;45     	 /*TIM1 input clock (TIM1CLK) is set to 2 * APB2 clock (PCLK2), since APB2 
;;;46         prescaler is different from 1.   
;;;47         TIM1CLK = 2 * PCLK2  
;;;48         PCLK2 = HCLK / 2 
;;;49         => TIM1CLK = 2 * (HCLK / 2) = HCLK = SystemCoreClock
;;;50       
;;;51         TIM1CLK is fixed to SystemCoreClock, the TIM1 Prescaler is equal to 0 so the 
;;;52         TIM1 counter clock used is SystemCoreClock (168MHz).
;;;53     
;;;54         The objective is to generate PWM signal at _Frequency KHz:
;;;55         - TIM1_Period = (SystemCoreClock / frequency) - 1   */
;;;56     
;;;57     	 /* Compute the value to be set in ARR register to generate signal frequency at _Frequency Khz */
;;;58          TimerPeriod = (SystemCoreClock / _Frequency) - 1;
00007a  483b              LDR      r0,|L1.360|
00007c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00007e  fbb0f0f6          UDIV     r0,r0,r6
000082  1e40              SUBS     r0,r0,#1
000084  b285              UXTH     r5,r0
;;;59     	 
;;;60     	 
;;;61     	 /*The Timer pulse is calculated as follows:
;;;62          - ChannelxPulse = DutyCycle * (TIM1_Period - 1) / 100  */  
;;;63     	 //算占空比的公式
;;;64     	 
;;;65     	   /* Compute CCR1 value to generate a duty cycle at duty_cycle for channel 1 */
;;;66     	 Channel1Pulse = (uint16_t) (((uint32_t) duty_cycle * (TimerPeriod - 1)) / 100);
000086  1e68              SUBS     r0,r5,#1
000088  4360              MULS     r0,r4,r0
00008a  2164              MOVS     r1,#0x64
00008c  fbb0f0f1          UDIV     r0,r0,r1
000090  b287              UXTH     r7,r0
;;;67     	 
;;;68     	  /* Compute CCR2 value to generate a duty cycle at duty_cycle  for channel 2 */
;;;69           Channel2Pulse = (uint16_t) (((uint32_t) duty_cycle * (TimerPeriod - 1)) / 100);
000092  1e68              SUBS     r0,r5,#1
000094  4360              MULS     r0,r4,r0
000096  fbb0f0f1          UDIV     r0,r0,r1
00009a  fa1ff880          UXTH     r8,r0
;;;70     	  
;;;71     	/* Time Base configuration */
;;;72     	TIM_TimeBaseStructure.TIM_Prescaler = 0;
00009e  2000              MOVS     r0,#0
0000a0  f8ad0024          STRH     r0,[sp,#0x24]
;;;73     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
0000a4  f8ad0026          STRH     r0,[sp,#0x26]
;;;74     	TIM_TimeBaseStructure.TIM_Period = TimerPeriod;
0000a8  950a              STR      r5,[sp,#0x28]
;;;75     	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
0000aa  f8ad002c          STRH     r0,[sp,#0x2c]
;;;76     	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
0000ae  f88d002e          STRB     r0,[sp,#0x2e]
;;;77     
;;;78         TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
0000b2  a909              ADD      r1,sp,#0x24
0000b4  482d              LDR      r0,|L1.364|
0000b6  f7fffffe          BL       TIM_TimeBaseInit
;;;79     	
;;;80     	  /* Channel 1, 2 and  Configuration in PWM mode */
;;;81     	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
0000ba  2060              MOVS     r0,#0x60
0000bc  f8ad0010          STRH     r0,[sp,#0x10]
;;;82     	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
0000c0  2001              MOVS     r0,#1
0000c2  f8ad0012          STRH     r0,[sp,#0x12]
;;;83     	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
0000c6  2004              MOVS     r0,#4
0000c8  f8ad0014          STRH     r0,[sp,#0x14]
;;;84     	TIM_OCInitStructure.TIM_Pulse = Channel1Pulse;
0000cc  9706              STR      r7,[sp,#0x18]
;;;85     	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
0000ce  2000              MOVS     r0,#0
0000d0  f8ad001c          STRH     r0,[sp,#0x1c]
;;;86     	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
0000d4  f8ad001e          STRH     r0,[sp,#0x1e]
;;;87     	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
0000d8  f8ad0020          STRH     r0,[sp,#0x20]
;;;88     	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
0000dc  f8ad0022          STRH     r0,[sp,#0x22]
;;;89     	
;;;90     	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
0000e0  a904              ADD      r1,sp,#0x10
0000e2  4822              LDR      r0,|L1.364|
0000e4  f7fffffe          BL       TIM_OC1Init
;;;91     	
;;;92     	TIM_OC1PreloadConfig(TIM1,TIM_OCPreload_Enable);          //输出比较通道1相关预装载寄存器使能  CCME1->OC1PE=1
0000e8  2108              MOVS     r1,#8
0000ea  4820              LDR      r0,|L1.364|
0000ec  f7fffffe          BL       TIM_OC1PreloadConfig
;;;93     	
;;;94     	TIM_OCInitStructure.TIM_Pulse = Channel2Pulse;
0000f0  f8cd8018          STR      r8,[sp,#0x18]
;;;95     	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
0000f4  a904              ADD      r1,sp,#0x10
0000f6  481d              LDR      r0,|L1.364|
0000f8  f7fffffe          BL       TIM_OC2Init
;;;96     	TIM_OC2PreloadConfig(TIM1,TIM_OCPreload_Enable);   
0000fc  2108              MOVS     r1,#8
0000fe  481b              LDR      r0,|L1.364|
000100  f7fffffe          BL       TIM_OC2PreloadConfig
;;;97     	
;;;98     	TIM_ARRPreloadConfig(TIM1, ENABLE);   
000104  2101              MOVS     r1,#1
000106  4819              LDR      r0,|L1.364|
000108  f7fffffe          BL       TIM_ARRPreloadConfig
;;;99     
;;;100    	 /*互补PWM死区与断路设置*/
;;;101        TIM_BDTRInitStructure.TIM_AutomaticOutput=TIM_AutomaticOutput_Disable;   //关闭自动使能输出，MOE只能由软件置1 BDTR->AOE=0
00010c  2000              MOVS     r0,#0
00010e  f8ad000c          STRH     r0,[sp,#0xc]
;;;102        TIM_BDTRInitStructure.TIM_Break=TIM_Break_Disable;                       //禁止短路输入  BDTE->BKE=0
000112  f8ad0008          STRH     r0,[sp,#8]
;;;103        TIM_BDTRInitStructure.TIM_BreakPolarity=TIM_BreakPolarity_High;
000116  f44f5000          MOV      r0,#0x2000
00011a  f8ad000a          STRH     r0,[sp,#0xa]
;;;104        TIM_BDTRInitStructure.TIM_DeadTime=50;// DT*(1/168M)     死区时间       BDTR->DGT=TIM_DeadTime
00011e  2032              MOVS     r0,#0x32
000120  f8ad0006          STRH     r0,[sp,#6]
;;;105    	    TIM_BDTRInitStructure.TIM_LOCKLevel=TIM_LOCKLevel_OFF;   // 关闭锁定
000124  2000              MOVS     r0,#0
000126  f8ad0004          STRH     r0,[sp,#4]
;;;106        TIM_BDTRInitStructure.TIM_OSSIState=TIM_OSSIState_Enable;   //空闲模式下的关闭状态选择写1
00012a  f44f6080          MOV      r0,#0x400
00012e  f8ad0002          STRH     r0,[sp,#2]
;;;107        TIM_BDTRInitStructure.TIM_OSSRState=TIM_OSSRState_Enable;   //运行模式下的关闭状态选择写1
000132  0040              LSLS     r0,r0,#1
000134  f8ad0000          STRH     r0,[sp,#0]
;;;108        TIM_BDTRConfig(TIM1,&TIM_BDTRInitStructure); 
000138  4669              MOV      r1,sp
00013a  480c              LDR      r0,|L1.364|
00013c  f7fffffe          BL       TIM_BDTRConfig
;;;109        
;;;110    
;;;111    	
;;;112    	  /* Main Output Enable */
;;;113         TIM_CtrlPWMOutputs(TIM1, ENABLE);
000140  2101              MOVS     r1,#1
000142  480a              LDR      r0,|L1.364|
000144  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;114    	
;;;115    	TIM_CCPreloadControl(TIM1,ENABLE);  //CR2->CCPC=1
000148  2101              MOVS     r1,#1
00014a  4808              LDR      r0,|L1.364|
00014c  f7fffffe          BL       TIM_CCPreloadControl
;;;116    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;117    	
;;;118    		/* TIM1 counter enable */
;;;119        TIM_Cmd(TIM1, ENABLE);	
000150  2101              MOVS     r1,#1
000152  4806              LDR      r0,|L1.364|
000154  f7fffffe          BL       TIM_Cmd
;;;120    }
000158  b00e              ADD      sp,sp,#0x38
00015a  e8bd81f0          POP      {r4-r8,pc}
;;;121    
                          ENDP

00015e  0000              DCW      0x0000
                  |L1.352|
                          DCD      0x40020000
                  |L1.356|
                          DCD      0x40020400
                  |L1.360|
                          DCD      SystemCoreClock
                  |L1.364|
                          DCD      0x40010000

                          AREA ||i.bsp_test||, CODE, READONLY, ALIGN=2

                  bsp_test PROC
;;;121    
;;;122    void bsp_test(void)
000000  b510              PUSH     {r4,lr}
;;;123    {
000002  b08e              SUB      sp,sp,#0x38
;;;124    	uint16_t TimerPeriod = 0;  //ARR值
000004  2400              MOVS     r4,#0
;;;125    	
;;;126    		GPIO_InitTypeDef GPIO_InitStructure;
;;;127    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;128    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;129    		TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
;;;130    	
;;;131    		  /* TIM1 clock enable */
;;;132        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
000006  2101              MOVS     r1,#1
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;133    	
;;;134    	  /* GPIOA and GPIOB clocks enable */
;;;135    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA |RCC_AHB1Periph_GPIOE|RCC_AHB1Periph_GPIOB, ENABLE);
00000e  2101              MOVS     r1,#1
000010  2013              MOVS     r0,#0x13
000012  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;136    	
;;;137    		//配置TIM1 Channel_1(PA8)  Channel_2(PE11) 
;;;138    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 ;
000016  f44f7080          MOV      r0,#0x100
00001a  900c              STR      r0,[sp,#0x30]
;;;139    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00001c  2002              MOVS     r0,#2
00001e  f88d0034          STRB     r0,[sp,#0x34]
;;;140    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000022  2003              MOVS     r0,#3
000024  f88d0035          STRB     r0,[sp,#0x35]
;;;141    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000028  2000              MOVS     r0,#0
00002a  f88d0036          STRB     r0,[sp,#0x36]
;;;142    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00002e  2001              MOVS     r0,#1
000030  f88d0037          STRB     r0,[sp,#0x37]
;;;143    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000034  a90c              ADD      r1,sp,#0x30
000036  4845              LDR      r0,|L2.332|
000038  f7fffffe          BL       GPIO_Init
;;;144    	
;;;145    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 ;
00003c  f44f6000          MOV      r0,#0x800
000040  900c              STR      r0,[sp,#0x30]
;;;146    	GPIO_Init(GPIOE, &GPIO_InitStructure);
000042  a90c              ADD      r1,sp,#0x30
000044  4842              LDR      r0,|L2.336|
000046  f7fffffe          BL       GPIO_Init
;;;147    	
;;;148    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 ;
00004a  f44f5000          MOV      r0,#0x2000
00004e  900c              STR      r0,[sp,#0x30]
;;;149    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000050  a90c              ADD      r1,sp,#0x30
000052  4840              LDR      r0,|L2.340|
000054  f7fffffe          BL       GPIO_Init
;;;150    	
;;;151    		 /* Connect TIM pins to AF1 */
;;;152    	GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_TIM1);
000058  2201              MOVS     r2,#1
00005a  2108              MOVS     r1,#8
00005c  483b              LDR      r0,|L2.332|
00005e  f7fffffe          BL       GPIO_PinAFConfig
;;;153    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_TIM1);
000062  2201              MOVS     r2,#1
000064  210b              MOVS     r1,#0xb
000066  483a              LDR      r0,|L2.336|
000068  f7fffffe          BL       GPIO_PinAFConfig
;;;154    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_TIM1);
00006c  2201              MOVS     r2,#1
00006e  210d              MOVS     r1,#0xd
000070  4838              LDR      r0,|L2.340|
000072  f7fffffe          BL       GPIO_PinAFConfig
;;;155    	
;;;156    		 /*TIM1 input clock (TIM1CLK) is set to 2 * APB2 clock (PCLK2), since APB2 
;;;157        prescaler is different from 1.   
;;;158        TIM1CLK = 2 * PCLK2  
;;;159        PCLK2 = HCLK / 2 
;;;160        => TIM1CLK = 2 * (HCLK / 2) = HCLK = SystemCoreClock
;;;161      
;;;162        TIM1CLK is fixed to SystemCoreClock, the TIM1 Prescaler is equal to 0 so the 
;;;163        TIM1 counter clock used is SystemCoreClock (168MHz).
;;;164    
;;;165        The objective is to generate PWM signal at _Frequency KHz:
;;;166        - TIM1_Period = (SystemCoreClock / frequency) - 1   */
;;;167    
;;;168    	 /* Compute the value to be set in ARR register to generate signal frequency at _Frequency Khz */
;;;169         TimerPeriod = (SystemCoreClock / 40000 ) - 1;
000076  4838              LDR      r0,|L2.344|
000078  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00007a  f6494140          MOV      r1,#0x9c40
00007e  fbb0f0f1          UDIV     r0,r0,r1
000082  1e40              SUBS     r0,r0,#1
000084  b284              UXTH     r4,r0
;;;170    	 
;;;171    	/* Time Base configuration */
;;;172    	TIM_TimeBaseStructure.TIM_Prescaler = 0;
000086  2000              MOVS     r0,#0
000088  f8ad0024          STRH     r0,[sp,#0x24]
;;;173    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
00008c  f8ad0026          STRH     r0,[sp,#0x26]
;;;174    	TIM_TimeBaseStructure.TIM_Period = TimerPeriod;
000090  940a              STR      r4,[sp,#0x28]
;;;175    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
000092  f8ad002c          STRH     r0,[sp,#0x2c]
;;;176    
;;;177        TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
000096  a909              ADD      r1,sp,#0x24
000098  4830              LDR      r0,|L2.348|
00009a  f7fffffe          BL       TIM_TimeBaseInit
;;;178    	
;;;179    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Toggle;
00009e  2030              MOVS     r0,#0x30
0000a0  f8ad0010          STRH     r0,[sp,#0x10]
;;;180    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
0000a4  2001              MOVS     r0,#1
0000a6  f8ad0012          STRH     r0,[sp,#0x12]
;;;181    	TIM_OCInitStructure.TIM_Pulse = 0;
0000aa  2000              MOVS     r0,#0
0000ac  9006              STR      r0,[sp,#0x18]
;;;182    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
0000ae  2002              MOVS     r0,#2
0000b0  f8ad001c          STRH     r0,[sp,#0x1c]
;;;183    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
0000b4  2004              MOVS     r0,#4
0000b6  f8ad0014          STRH     r0,[sp,#0x14]
;;;184    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
0000ba  2008              MOVS     r0,#8
0000bc  f8ad001e          STRH     r0,[sp,#0x1e]
;;;185    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
0000c0  2000              MOVS     r0,#0
0000c2  f8ad0020          STRH     r0,[sp,#0x20]
;;;186    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
0000c6  f8ad0022          STRH     r0,[sp,#0x22]
;;;187      
;;;188      
;;;189        TIM_OC1Init(TIM1, &TIM_OCInitStructure);
0000ca  a904              ADD      r1,sp,#0x10
0000cc  4823              LDR      r0,|L2.348|
0000ce  f7fffffe          BL       TIM_OC1Init
;;;190    		TIM_OC1PreloadConfig(TIM1,TIM_OCPreload_Enable);          //输出比较通道1相关预装载寄存器使能  CCME1->OC1PE=1
0000d2  2108              MOVS     r1,#8
0000d4  4821              LDR      r0,|L2.348|
0000d6  f7fffffe          BL       TIM_OC1PreloadConfig
;;;191    	 
;;;192    	 TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
0000da  2000              MOVS     r0,#0
0000dc  f8ad001c          STRH     r0,[sp,#0x1c]
;;;193    	   TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
0000e0  2001              MOVS     r0,#1
0000e2  f8ad0012          STRH     r0,[sp,#0x12]
;;;194    	   TIM_OCInitStructure.TIM_Pulse = 1500;
0000e6  f24050dc          MOV      r0,#0x5dc
0000ea  9006              STR      r0,[sp,#0x18]
;;;195    	   
;;;196    	     TIM_OC2Init(TIM1, &TIM_OCInitStructure);
0000ec  a904              ADD      r1,sp,#0x10
0000ee  481b              LDR      r0,|L2.348|
0000f0  f7fffffe          BL       TIM_OC2Init
;;;197    		TIM_OC2PreloadConfig(TIM1,TIM_OCPreload_Disable);          //输出比较通道1相关预装载寄存器使能  CCME1->OC1PE=1
0000f4  2100              MOVS     r1,#0
0000f6  4819              LDR      r0,|L2.348|
0000f8  f7fffffe          BL       TIM_OC2PreloadConfig
;;;198    	 
;;;199    	 	 /*互补PWM死区与断路设置*/
;;;200        TIM_BDTRInitStructure.TIM_AutomaticOutput=TIM_AutomaticOutput_Disable;   //关闭自动使能输出，MOE只能由软件置1 BDTR->AOE=0
0000fc  2000              MOVS     r0,#0
0000fe  f8ad000c          STRH     r0,[sp,#0xc]
;;;201        TIM_BDTRInitStructure.TIM_Break=TIM_Break_Disable;                       //禁止短路输入  BDTE->BKE=0
000102  f8ad0008          STRH     r0,[sp,#8]
;;;202        TIM_BDTRInitStructure.TIM_BreakPolarity=TIM_BreakPolarity_High;
000106  f44f5000          MOV      r0,#0x2000
00010a  f8ad000a          STRH     r0,[sp,#0xa]
;;;203        TIM_BDTRInitStructure.TIM_DeadTime=50;// DT*(1/168M)     死区时间       BDTR->DGT=TIM_DeadTime
00010e  2032              MOVS     r0,#0x32
000110  f8ad0006          STRH     r0,[sp,#6]
;;;204    	    TIM_BDTRInitStructure.TIM_LOCKLevel=TIM_LOCKLevel_OFF;   // 关闭锁定
000114  2000              MOVS     r0,#0
000116  f8ad0004          STRH     r0,[sp,#4]
;;;205        TIM_BDTRInitStructure.TIM_OSSIState=TIM_OSSIState_Enable;   //空闲模式下的关闭状态选择写1
00011a  f44f6080          MOV      r0,#0x400
00011e  f8ad0002          STRH     r0,[sp,#2]
;;;206        TIM_BDTRInitStructure.TIM_OSSRState=TIM_OSSRState_Enable;   //运行模式下的关闭状态选择写1
000122  0040              LSLS     r0,r0,#1
000124  f8ad0000          STRH     r0,[sp,#0]
;;;207        TIM_BDTRConfig(TIM1,&TIM_BDTRInitStructure); 
000128  4669              MOV      r1,sp
00012a  480c              LDR      r0,|L2.348|
00012c  f7fffffe          BL       TIM_BDTRConfig
;;;208    	 
;;;209    	 
;;;210    	  /* Main Output Enable */
;;;211         TIM_CtrlPWMOutputs(TIM1, ENABLE);
000130  2101              MOVS     r1,#1
000132  480a              LDR      r0,|L2.348|
000134  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;212    	
;;;213    	TIM_CCPreloadControl(TIM1,ENABLE);  //CR2->CCPC=1
000138  2101              MOVS     r1,#1
00013a  4808              LDR      r0,|L2.348|
00013c  f7fffffe          BL       TIM_CCPreloadControl
;;;214    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;215    	 
;;;216    	 /* TIM enable counter */
;;;217      TIM_Cmd(TIM1, ENABLE);
000140  2101              MOVS     r1,#1
000142  4806              LDR      r0,|L2.348|
000144  f7fffffe          BL       TIM_Cmd
;;;218    }
000148  b00e              ADD      sp,sp,#0x38
00014a  bd10              POP      {r4,pc}
                          ENDP

                  |L2.332|
                          DCD      0x40020000
                  |L2.336|
                          DCD      0x40021000
                  |L2.340|
                          DCD      0x40020400
                  |L2.344|
                          DCD      SystemCoreClock
                  |L2.348|
                          DCD      0x40010000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_advanced_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_bsp_advanced_timer_c_c52b3eb9____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_bsp_advanced_timer_c_c52b3eb9____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_bsp_advanced_timer_c_c52b3eb9____REVSH|
#line 144
|__asm___20_bsp_advanced_timer_c_c52b3eb9____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_bsp_advanced_timer_c_c52b3eb9____RRX|
#line 300
|__asm___20_bsp_advanced_timer_c_c52b3eb9____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
